<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>BayMax&#39;s Blog</title>
  
  <subtitle>个人博客，记录美好生活</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://error-codes.github.io/"/>
  <updated>2020-02-23T01:37:14.233Z</updated>
  <id>https://error-codes.github.io/</id>
  
  <author>
    <name>BayMax</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>数据类型转换、运算符、方法入门</title>
    <link href="https://error-codes.github.io/posts/e64a53c7.html"/>
    <id>https://error-codes.github.io/posts/e64a53c7.html</id>
    <published>2020-02-22T06:44:00.000Z</published>
    <updated>2020-02-23T01:37:14.233Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据类型转换、运算符、方法入门"><a href="#数据类型转换、运算符、方法入门" class="headerlink" title="数据类型转换、运算符、方法入门"></a>数据类型转换、运算符、方法入门</h1><hr><h2 id="1-数据类型转换"><a href="#1-数据类型转换" class="headerlink" title="1 .　数据类型转换"></a>1 .　数据类型转换</h2><hr><p>Java程序中要求参与的计算的数据，必须要保证数据类型的一致性，如果数据类型不一致将发生类型转换。</p><h3 id="1-1-自动转换"><a href="#1-1-自动转换" class="headerlink" title="1 . 1　自动转换"></a>1 . 1　自动转换</h3><hr><p>一个  <kbd>   int </kbd>    类型变量和一个  <kbd>   byte </kbd>    类型变量进行假发运算，结果会是什么数据类型？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">byte</span> b = <span class="number">2</span>;</span><br></pre></td></tr></table></figure><p>运算结果，变量的类型将是  <kbd>   int </kbd>    类型，这就死出现了数据类型的自动类型转换现象。</p><ul><li>自动转换：将  <kbd>   取值范围小的类型 </kbd>    自动提升为  <kbd>   取值范围大的类型 </kbd>    。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">byte</span> b = <span class="number">2</span>;</span><br><span class="line">    <span class="comment">// byte x = b + i;  // 报错</span></span><br><span class="line">    <span class="comment">// int类型和byte类型运算，结果是int类型</span></span><br><span class="line">    <span class="keyword">int</span> j = b + i;</span><br><span class="line">    System.out.println(j);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="转换原理图解"><a href="#转换原理图解" class="headerlink" title="转换原理图解"></a>转换原理图解</h4><p>  <kbd>   byte </kbd>    类型内存占用  <kbd>   一个字节 </kbd>    ，在和  <kbd>   int </kbd>   类型进行运算时会提升为  <kbd>   int </kbd>   类型，自动补充  <kbd>   三个字节 </kbd>   ，因此计算后的结果还是  <kbd>   int </kbd>   类型。</p><p><img src="https://s2.ax1x.com/2020/02/23/3llGOU.png" alt="3llGOU.png"></p><p>同理，当一个  <kbd>   int </kbd>   类型变量和一个  <kbd>   double </kbd>   变量运算时，  <kbd>   int </kbd>   类型将会自动提升为  <kbd>   double </kbd>   类型进行运算。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">double</span> d = <span class="number">2.5</span>;</span><br><span class="line">    <span class="comment">// int类型和double类型运算时，结果是double类型</span></span><br><span class="line">    <span class="comment">// int类型会提升为double类型</span></span><br><span class="line">    <span class="comment">// int e = i + d;// 报错</span></span><br><span class="line">    <span class="keyword">double</span> e = i + d;</span><br><span class="line">    System.out.println(e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="转换规则"><a href="#转换规则" class="headerlink" title="转换规则"></a>转换规则</h4><p>范围小的类型向范围大的类型提升，  <kbd>   byte、short、char </kbd>   运算时直接提升为  <kbd>   int </kbd>   。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">byte</span>、<span class="keyword">short</span>、<span class="keyword">char</span> ---&gt; <span class="keyword">int</span> ---&gt; <span class="keyword">long</span> ---&gt; <span class="keyword">float</span> ---&gt; <span class="keyword">double</span></span><br></pre></td></tr></table></figure><h3 id="1-2-强制转换"><a href="#1-2-强制转换" class="headerlink" title="1 . 2　强制转换"></a>1 . 2　强制转换</h3><hr><p>将  <kbd>   $ 1.5 $ </kbd>   赋值到  <kbd>   int </kbd>   类型变量会发生什么？产生编译失败，肯定无法赋值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">1.5</span>; <span class="comment">// 错误</span></span><br></pre></td></tr></table></figure><p>  <kbd>   double </kbd>   类型内存  <kbd>   $ 8 $个字节 </kbd>   ，  <kbd>   int </kbd>   类型内存  <kbd>   $ 4 $ 个字节 </kbd>   。</p><p>  <kbd>   $ 1.5 $ </kbd>   是  <kbd>   double </kbd>   类型，取值范围大于  <kbd>   int </kbd>   。可以理解为  <kbd>   double </kbd>   是8升的水桶，  <kbd>   int </kbd>   是4升的水杯，不能把水桶中的水直接倒进水杯中。</p><p>想要赋值成功，只有通过强制类型转换，将  <kbd>   double </kbd>   类型强制转换为  <kbd>   int </kbd>   类型才能赋值。</p><ul><li>强制类型转换：将  <kbd>   取值范围大的类型 </kbd>   强制转换为  <kbd>   取值范围小的类型 </kbd>   。</li></ul><p>比较而言，自动转换是Java自动执行的，而强制转换需要我们手动执行。</p><p>自动转换是Java判断后给出的方案，水杯不能装下水桶中的水，把水杯换成同等大小的水桶，然后再把水桶中的水倒进水杯换成的水桶中。</p><p>强制转换是我们判断后给出的方案，水杯就要装水桶中的水，多出来的水就让它溢出，能装多少水就装多少水。</p><h4 id="转换格式"><a href="#转换格式" class="headerlink" title="转换格式"></a>转换格式</h4><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">数据类型 变量名 = （数据类型）被转数据值<span class="comment">;</span></span><br></pre></td></tr></table></figure><p>将  <kbd>   $ 1.5 $ </kbd>   赋值到  <kbd>   int </kbd>   类型，代码修改为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// double类型强制转换为int类型，直接去掉小数点。</span></span><br><span class="line"><span class="keyword">int</span> i = (<span class="keyword">int</span>)<span class="number">1.5</span>;</span><br></pre></td></tr></table></figure><p>同理，当一个  <kbd>   short </kbd>   类型与  <kbd>   1 </kbd>   相加，我们知道会类型提升，但是还想给结果赋值为short类型，就需要强制类型转换。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="comment">// short类型变量，内存中2个字节</span></span><br><span class="line"><span class="keyword">short</span> s = <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">出现编译失败</span></span><br><span class="line"><span class="comment">s 和 1 做运算时，1 是 int 类型，s 会被提升为 int 类型</span></span><br><span class="line"><span class="comment">s + 1 后的结果是 int 类型，将结果再赋值给 short 类型时发生错误</span></span><br><span class="line"><span class="comment">short 内存2个字节，int 内存4个字节</span></span><br><span class="line"><span class="comment">必须将 int 强制转换为 short 才能完成赋值</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">s = s + <span class="number">1</span>; <span class="comment">// 编译失败</span></span><br><span class="line">s = (<span class="keyword">short</span>)(s + <span class="number">1</span>); <span class="comment">// 编译成功</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="转换原理图解-1"><a href="#转换原理图解-1" class="headerlink" title="转换原理图解"></a>转换原理图解</h4><p><img src="https://s2.ax1x.com/2020/02/23/3llYmF.png" alt="3llYmF.png"></p><h3 id="强烈注意"><a href="#强烈注意" class="headerlink" title="强烈注意"></a>强烈注意</h3><ul><li>浮点转成整形，直接取消小数点，可能会造成数据损失精度。</li><li><kbd>   int </kbd>   强制转成  <kbd>   short </kbd>   砍掉2个字节，可能造成数据丢失。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义s为short范围内最大值</span></span><br><span class="line"><span class="keyword">short</span> s = <span class="number">32767</span>;</span><br><span class="line"><span class="comment">// 运算后，强制转换，砍掉2个字节后会出现不确定的结果</span></span><br><span class="line">s = (<span class="keyword">short</span>)(s + <span class="number">10</span>); <span class="comment">// -32759</span></span><br></pre></td></tr></table></figure><h3 id="ASCII编码表"><a href="#ASCII编码表" class="headerlink" title="ASCII编码表"></a>ASCII编码表</h3><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="comment">// 字符类型变量</span></span><br><span class="line"><span class="keyword">char</span> c = <span class="string">'a'</span>;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="comment">// 字符类型和int类型计算</span></span><br><span class="line">System.out.println(c + i); <span class="comment">// 98</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在计算机的内部都是二进制的0、1 数据，如何让计算机可以识别人类文字的问题呢？就产生出了编码表的概念。</p><ul><li>编码表：将人类的文字和一个十进制的数进行对应起来组成的一张表格。</li></ul><div class="table-container"><table><thead><tr><th>字符</th><th>数值</th></tr></thead><tbody><tr><td>$ 0 $</td><td>$ 48 $</td></tr><tr><td>$ 9 $</td><td>$ 57 $</td></tr><tr><td>A</td><td>$ 65 $</td></tr><tr><td>Z</td><td>$ 90 $</td></tr><tr><td>a</td><td>$ 97 $</td></tr><tr><td>z</td><td>$ 122 $</td></tr></tbody></table></div><ul><li>将所有的的英文字母，数字，符号都和十进制进行了对应，因此产生了世界上第一张编码表ASCII（American Standard Code for Information Interchange 美国标准信息交换码）。</li></ul><blockquote><p>小贴士：</p><p>在char类型和int类型计算的过程中，char类型的字符先查询编码表，得到 $ 97 $，再和 $ 1 $求和，结果为$ 98 $。char类型提升 为了int类型。char类型内存$ 2 $个字节，int类型内存$ 4 $个字节。 </p></blockquote><h2 id="2-运算符"><a href="#2-运算符" class="headerlink" title="2 .　运算符"></a>2 .　运算符</h2><hr><h3 id="2-1-算数运算符"><a href="#2-1-算数运算符" class="headerlink" title="2 . 1　算数运算符"></a>2 . 1　算数运算符</h3><hr><div class="table-container"><table><thead><tr><th>算数运算符包括：</th><th></th></tr></thead><tbody><tr><td><kbd>   + </kbd></td><td>加法运算、字符串连接运算</td></tr><tr><td><kbd>   - </kbd></td><td>减法运算</td></tr><tr><td><kbd>   * </kbd></td><td>乘法运算</td></tr><tr><td><kbd>   / </kbd></td><td>除法运算</td></tr><tr><td><kbd>   % </kbd></td><td>取模运算，两个数字相除取余数</td></tr><tr><td><kbd>   ++ </kbd>   、  <kbd>   — </kbd></td><td>自增、自减运算</td></tr></tbody></table></div><p>Java中，整数使用以上运算符，无论如何计算，也不会得到小数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">1357</span>;</span><br><span class="line">System.out.println(i/<span class="number">1000</span>*<span class="number">1000</span>); <span class="comment">// 1000</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><kbd>   ++ </kbd>   运算，变量自己增加1。反之，  <kbd>   — </kbd>   运算，变量自己减少1，用法与  <kbd>   ++ </kbd>   一致。</p><ul><li><p>独立运算：</p><ul><li>变量在独立运算时，  <kbd>   前++ </kbd>   和  <kbd>   后++ </kbd>   没有区别。</li><li>变量  <kbd>   前++ </kbd>   ：例如  <kbd>   ++i </kbd>   。</li><li>变量  <kbd>   后++ </kbd>   ：例如  <kbd>   i++ </kbd>   。</li></ul></li><li><p>混合运算：</p><ul><li><p>和其他变量放在一起，  <kbd>   前++ </kbd>   和  <kbd>   后++ </kbd>   就产生了不同。</p></li><li><p>变量  <kbd>   前++ </kbd>   ：变量a自己加1，将加1后的结果赋值给b，也就是说a先计算。a和b都是2。</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> b = ++a;</span><br><span class="line">System.out.println(a); <span class="comment">// 2</span></span><br><span class="line">System.out.println(b); <span class="comment">// 2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>变量  <kbd>   后++ </kbd>   ：变量a自己的值赋值给变量b，此时变量b的值就是1，变量a自己再加1。a是2，b是1。</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> b = a++;</span><br><span class="line">System.out.println(a); <span class="comment">// 2</span></span><br><span class="line">System.out.println(b); <span class="comment">// 1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p><kbd>   + </kbd>   符号在字符串中的操作：</p><ul><li><p><kbd>   + </kbd>   符号在遇到字符串的时候，表示连接，拼接的含义。</p></li><li><p>“a” + “b”的结果是”ab”，连接含义。</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"5 + 5 = "</span> + <span class="number">5</span> + <span class="number">5</span>); <span class="comment">// 输出5 + 5 = 55</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="2-2-赋值运算符"><a href="#2-2-赋值运算符" class="headerlink" title="2 . 2　赋值运算符"></a>2 . 2　赋值运算符</h3><hr><div class="table-container"><table><thead><tr><th>赋值运算符包括：</th><th></th></tr></thead><tbody><tr><td><kbd>   = </kbd></td><td>等于号</td></tr><tr><td><kbd>   += </kbd></td><td>加等于</td></tr><tr><td><kbd>   -= </kbd></td><td>减等于</td></tr><tr><td><kbd>   *= </kbd></td><td>乘等于</td></tr><tr><td><kbd>   /= </kbd></td><td>除等于</td></tr><tr><td><kbd>   %= </kbd></td><td>取模等</td></tr></tbody></table></div><ul><li><p>赋值运算符，就是将符号右边的值，赋给左边的变量。</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">5</span>;</span><br><span class="line">i += <span class="number">5</span>; <span class="comment">//计算方式：i = i + 5  变量i先加5，再赋值给变量i</span></span><br><span class="line">System.out.println(i); <span class="comment">// 10</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-3-比较运算符"><a href="#2-3-比较运算符" class="headerlink" title="2 . 3　比较运算符"></a>2 . 3　比较运算符</h3><hr><div class="table-container"><table><thead><tr><th>比较运算符包括：</th><th></th></tr></thead><tbody><tr><td><kbd>   == </kbd></td><td>比较符号两边数据是否相等，相等结果是true。</td></tr><tr><td><kbd>   &lt; </kbd></td><td>比较符号左边的数据是否小于右边的数据，如果小于结果是true。</td></tr><tr><td><kbd>   &gt; </kbd></td><td>比较符号左边的数据是否大于右边的数据，如果大于结果是true。</td></tr><tr><td><kbd>   &lt;= </kbd></td><td>比较符号左边的数据是否小于或者等于右边的数据，如果小于结果是true。</td></tr><tr><td><kbd>   &gt;= </kbd></td><td>比较符号左边的数据是否大于或者等于右边的数据，如果小于结果是true。</td></tr><tr><td><kbd>   != </kbd></td><td>不等于符号 ，如果符号两边的数据不相等，结果是true。</td></tr></tbody></table></div><ul><li><p>比较运算符，是两个数据之间进行比较的运算，运算结果都是布尔值  <kbd>   true </kbd>   或者  <kbd>   false </kbd>   。</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">System.out.println(<span class="number">1</span> == <span class="number">1</span>); <span class="comment">// true</span></span><br><span class="line">System.out.println(<span class="number">1</span> &lt; <span class="number">2</span>); <span class="comment">// true</span></span><br><span class="line">System.out.println(<span class="number">3</span> &gt; <span class="number">4</span>); <span class="comment">// false</span></span><br><span class="line">System.out.println(<span class="number">3</span> &lt;= <span class="number">4</span>); <span class="comment">// true</span></span><br><span class="line">System.out.println(<span class="number">3</span> &gt;= <span class="number">4</span>); <span class="comment">// false</span></span><br><span class="line">System.out.println(<span class="number">3</span> != <span class="number">4</span>); <span class="comment">// true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-4-逻辑运算符"><a href="#2-4-逻辑运算符" class="headerlink" title="2 . 4　逻辑运算符"></a>2 . 4　逻辑运算符</h3><hr><div class="table-container"><table><thead><tr><th>逻辑运算符包括：</th><th></th></tr></thead><tbody><tr><td><kbd>   &amp;&amp; </kbd>   短路与</td><td>$ 1 $ . 　两边都是true，结果是true<br>$ 2 $ . 　一边是false，结果是false<br>短路特点：符号左边是false，右边不再运算</td></tr><tr><td><kbd>   \</kbd></td><td>\</td><td>&lt;/kbd&gt;   短路或</td><td>$ 1 $ .　 两边都是false，结果是false<br>$ 2 $ . 　一边是true，结果是true<br>短路特点： 符号左边是true，右边不再运算</td></tr><tr><td><kbd>   ！ </kbd>   取反</td><td>$ 1 $. 　! true 结果是false<br>$ 2 $ . 　! false结果是true</td></tr></tbody></table></div><ul><li><p>逻辑运算符，是用来连接两个布尔类型结果的运算符，运算结果都是布尔值  <kbd>   true </kbd>   或者  <kbd>   false </kbd>   。</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">System.out.println(<span class="keyword">true</span> &amp;&amp; <span class="keyword">true</span>); <span class="comment">// true</span></span><br><span class="line">System.out.println(<span class="keyword">true</span> &amp;&amp; <span class="keyword">false</span>); <span class="comment">// false</span></span><br><span class="line">System.out.println(<span class="keyword">false</span> &amp;&amp; <span class="keyword">true</span>); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">System.out.println(<span class="keyword">false</span> || <span class="keyword">false</span>); <span class="comment">// false</span></span><br><span class="line">System.out.println(<span class="keyword">false</span> || <span class="keyword">true</span>); <span class="comment">// true</span></span><br><span class="line">System.out.println(<span class="keyword">true</span> || <span class="keyword">false</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">System.out.println(!<span class="keyword">false</span>); <span class="comment">// true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-5-三元运算符"><a href="#2-5-三元运算符" class="headerlink" title="2 . 5　三元运算符"></a>2 . 5　三元运算符</h3><hr><ul><li><p>三元运算符格式：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">数据类型 变量名 = 布尔类型表达式 ? 结果<span class="number">1</span>: 结果<span class="number">2</span>;</span><br></pre></td></tr></table></figure></li><li><p>三元运算符计算方式：</p><ul><li>布尔类型表达式结果是true，三元运算符整体结果为1，赋值给变量。</li><li><p>布尔类型表达式结果是false，三元运算符整体结果为2，赋值给变量。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = (<span class="number">1</span> == <span class="number">2</span> ? <span class="number">100</span> : <span class="number">200</span>);</span><br><span class="line">System.out.println(i); <span class="comment">// 200</span></span><br><span class="line"><span class="keyword">int</span> j = (<span class="number">3</span> &lt;= <span class="number">4</span> ? <span class="number">500</span> : <span class="number">600</span>);</span><br><span class="line">System.out.println(j); <span class="comment">// 500</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="3-方法入门"><a href="#3-方法入门" class="headerlink" title="3 .　方法入门"></a>3 .　方法入门</h2><hr><h3 id="3-1-概述"><a href="#3-1-概述" class="headerlink" title="3 . 1　概述"></a>3 . 1　概述</h3><hr><p>在学习运算符的时候，都为每个运算符单独的创建一个新的类和main方法，我们会发现这样编写代码非常繁琐，而且重复代码过多，要想避免这些重复的代码，就需要使用方法来实现。</p><ul><li>方法：将一个功能抽取出来，把代码单独定义在一个大括号内，形成一个单独的功能。</li></ul><p>当我们需要这个功能时，就可以去调用，这样即实现了代码的复用性，也解决了代码冗余的现象。</p><h3 id="3-2-方法的定义"><a href="#3-2-方法的定义" class="headerlink" title="3 . 2　方法的定义"></a>3 . 2　方法的定义</h3><hr><ul><li><p>定义格式：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">修饰符 返回值类型 方法名 (参数列表)&#123;</span><br><span class="line">代码...</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>定义格式解释：</p><ul><li>修饰符：<ul><li>可访问控制符：<br>公共访问控制符  <kbd>   public </kbd>    ；<br>私有访问控制符  <kbd>   private </kbd>    ；<br>保护访问控制符  <kbd>   protected </kbd>    ；<br>私有保护访问控制符  <kbd>   private protected </kbd>   。</li><li>非访问控制符：<br>抽象方法控制符  <kbd>   abstract </kbd>    ；<br>静态方法控制符  <kbd>   static </kbd>    ；<br>最终方法控制符  <kbd>   final </kbd>    ；<br>本地方法控制符  <kbd>   native </kbd>    ；<br>同步方法控制符  <kbd>   synchronized </kbd>   。</li></ul></li><li>返回值类型：<br>空返回值类型  <kbd>   void </kbd>    ；<br>非空返回值类型  <kbd>   int、float、long、String、ArrayList&lt;&gt;、Object </kbd>   等。</li><li>方法名：为定义的方法起名，满足标识符规范，用来调用方法，推荐采用驼峰式命名。eg：methodA。</li><li>参数列表：<ul><li>无参数：留空，不需要。</li><li>有参数：运行方法时需要外界的数据，使得方法运行下去，需要的数据就是方法的参数列表。</li></ul></li><li>return：<ul><li>无返回值：return;方法结束。</li><li>有返回值：将返回值返回，retu11rn 20;。</li></ul></li></ul></li><li><p>举例：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">methodA</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"这是一个方法A"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-3-方法的调用"><a href="#3-3-方法的调用" class="headerlink" title="3 . 3　方法的调用"></a>3 . 3　方法的调用</h3><hr><p>方法在定义完毕后，方法不会自己运行，必须要被调用才能执行，我们可以在方法main中来调用我们自己定义好的方法。在主方法中，直接写要调用的方法名就可以调用了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="comment">// 调用定义的方法method</span></span><br><span class="line">method();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 定义方法，被main方法调用</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"定义的method方法，需要被main方法调用"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-4-调用练习"><a href="#3-4-调用练习" class="headerlink" title="3 . 4　调用练习"></a>3 . 4　调用练习</h3><hr><p>将三元运算符代码抽取到自定义的方法中，并调用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">int</span> j = <span class="number">5</span>;</span><br><span class="line"><span class="comment">// 调用定义的方法operator</span></span><br><span class="line">System.out.println(operator(i,j)); <span class="comment">// 200</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 定义方法operator，方法中定义三元运算符</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">operator</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> k = (i == j ? <span class="number">100</span> : <span class="number">200</span>);</span><br><span class="line"><span class="keyword">return</span> k;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-5-注意事项"><a href="#3-5-注意事项" class="headerlink" title="3 . 5　注意事项"></a>3 . 5　注意事项</h3><hr><ul><li><p>方法定义注意事项：</p><ul><li>方法必须定义在一类中方法外</li><li><p>方法不能定义在另一个方法里面</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 正确写法✔，类中，main方法外可以定义方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="comment">// 错误方法❌，一个方法不能定义在另一个方法内部</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="4-扩展知识点"><a href="#4-扩展知识点" class="headerlink" title="4 .　扩展知识点"></a>4 .　扩展知识点</h2><hr><h3 id="4-1-符号的扩展"><a href="#4-1-符号的扩展" class="headerlink" title="4 . 1　+=符号的扩展"></a>4 . 1　+=符号的扩展</h3><hr><p>下面的程序有问题吗？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="keyword">short</span> s = <span class="number">1</span>;</span><br><span class="line">s += <span class="number">1</span>;</span><br><span class="line">System.out.println(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分析：  <kbd>   s += 1 </kbd>   逻辑上看作是  <kbd>   s = s + 1 </kbd>   ，计算结果被提升为int类型，再向short类型赋值时发生错误，因为不能将取值范围大的类型赋值到取值范围小的类型。但是，  <kbd>   s = s + 1  进行两次运算 </kbd>   ，  <kbd>   += </kbd>   是一个运算符，只运算一次，并带有强制转换的特点，也就是说  <kbd>   s += 1 </kbd>   就是  <kbd>   s = (short)(s + 1) </kbd>   ，因此没有问题，编译通过，运行结果为2。</p><h3 id="4-2-常量和变量的运算"><a href="#4-2-常量和变量的运算" class="headerlink" title="4 . 2　常量和变量的运算"></a>4 . 2　常量和变量的运算</h3><hr><p>下面的程序有问题吗？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="keyword">byte</span> b1 = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">byte</span> b2 = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">byte</span> b3 = <span class="number">1</span> + <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">byte</span> b4 = b1 + b2;</span><br><span class="line">    System.out.println(b3);</span><br><span class="line">    System.out.println(b4);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分析：   <kbd>   b3 = 1 + 2  </kbd>   ，   <kbd>   1 和 2 </kbd>    是常量，为固定不变的数据，在编译的时候（编译器javac），已经确定了   <kbd>   1 + 2 </kbd>    的结果并没 有超过byte类型的取值范围，可以赋值给变量   <kbd>   b3 </kbd>    ，因此   <kbd>   b3=1 + 2 </kbd>    是正确的。<br>反之，   <kbd>   b4 = b2 + b3 </kbd>    ，   <kbd>   b2 和 b3 </kbd>    是变量，变量的值是可能变化的，在编译的时候，编译器javac不确定  <kbd>   b2 + b3 </kbd>   的结果是什 么，因此会将结果以int类型进行处理，所以int类型不能赋值给byte类型，因此编译失败。 </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;数据类型转换、运算符、方法入门&quot;&gt;&lt;a href=&quot;#数据类型转换、运算符、方法入门&quot; class=&quot;headerlink&quot; title=&quot;数据类型转换、运算符、方法入门&quot;&gt;&lt;/a&gt;数据类型转换、运算符、方法入门&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&quot;1-数据类型转换
      
    
    </summary>
    
    
      <category term="Java基础" scheme="https://error-codes.github.io/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="基础知识" scheme="https://error-codes.github.io/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
      <category term="Java" scheme="https://error-codes.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>变量和数据类型</title>
    <link href="https://error-codes.github.io/posts/33466eb7.html"/>
    <id>https://error-codes.github.io/posts/33466eb7.html</id>
    <published>2020-02-22T03:02:00.000Z</published>
    <updated>2020-02-22T06:51:03.501Z</updated>
    
    <content type="html"><![CDATA[<h1 id="变量和数据类型"><a href="#变量和数据类型" class="headerlink" title="变量和数据类型"></a>变量和数据类型</h1><hr><h2 id="变量概述"><a href="#变量概述" class="headerlink" title="变量概述"></a>变量概述</h2><hr><ul><li>变量：常量是固定不变的数据，那么在程序中可以变化的量称为变量。</li></ul><blockquote><p>数学中，可以使用字母代替数字运算,例如 x=1+5 或者 6=x+5。<br>程序中，可以使用字母保存数字的方式进行运算，提高计算能力，可以解决更多的问题。比如x保存5，x也可 以保存6，这样x保存的数据是可以改变的，也就是我们所讲解的变量。 </p></blockquote><p>Java中要求一个变量每次只能保存一个数据，必须要明确保存的数据类型。 </p><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><hr><h3 id="数据类型分类"><a href="#数据类型分类" class="headerlink" title="数据类型分类"></a>数据类型分类</h3><p>Java的数据类型分为两大类：</p><ul><li>基本数据类型：包括<kbd>整数</kbd>、<kbd>浮点数</kbd>、<kbd>字符</kbd>、<kbd>布尔</kbd>。</li><li>引用数据类型：包括<kbd>类</kbd>、<kbd>数组</kbd>、<kbd>字符串</kbd>、<kbd>接口</kbd>。</li></ul><h3 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h3><p>四类八种基本数据类型：</p><div class="table-container"><table><thead><tr><th>数据类型</th><th>关键字</th><th>内存占用</th><th>取值范围</th></tr></thead><tbody><tr><td>字节型</td><td>byte</td><td>1个字节</td><td>$ -128 $ ~ $127 $</td></tr><tr><td>短整型</td><td>short</td><td>2个字节</td><td>$ -32768 $ ~ $ 32767 $</td></tr><tr><td>整形</td><td>int(默认)</td><td>4个字节</td><td>-$ 2^{31} $ ~ $ 2^{31}-1 $</td></tr><tr><td>长整型</td><td>long</td><td>8个字节</td><td>-$ 2^{63} $ ~ $ 2^{63}-1 $</td></tr><tr><td>单精度浮点数</td><td>float</td><td>4个字节</td><td>$ 1.4013E-45 $ ~ $ 3.4028E+38 $</td></tr><tr><td>双精度浮点数</td><td>double(默认)</td><td>8个字节</td><td>$ 4.9E-324 $ ~ $1.7977E+308$</td></tr><tr><td>字符型</td><td>char</td><td>2个字节</td><td>$ 0 $ - $ 65535 $</td></tr><tr><td>布尔类型</td><td>boolean</td><td>1个字节</td><td>$ true $ ，$ false $</td></tr><tr><td></td><td></td><td></td></tr></tbody></table></div><blockquote><p> Java中的默认类型：整数类型是 <kbd>int</kbd>、浮点类型是 <kbd>double</kbd> 。</p></blockquote><h2 id="变量的定义"><a href="#变量的定义" class="headerlink" title="变量的定义"></a>变量的定义</h2><hr><p>变量定义的格式包括三个要素：<kbd>数据类型</kbd>、<kbd>变量名</kbd>、<kbd>数据值</kbd>。</p><h3 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h3><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">数据类型 变量名 = 数据值<span class="comment">;</span></span><br></pre></td></tr></table></figure><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><p>定义所有基本数据类型的变量，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Variable</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 定义字节型变量 b</span></span><br><span class="line">        <span class="keyword">byte</span> b = <span class="number">100</span>;</span><br><span class="line">        System.out.println(b);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 定义短整型变量 s</span></span><br><span class="line">        <span class="keyword">short</span> s = <span class="number">1000</span>;</span><br><span class="line">        System.out.println(s);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 定义整形变量 i</span></span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">123456</span>;</span><br><span class="line">        System.out.println(i);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 定义长整型变量 l</span></span><br><span class="line">        <span class="keyword">long</span> l = <span class="number">1234567890L</span>;</span><br><span class="line">        System.out.println(l);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 定义单精度浮点型变量 f</span></span><br><span class="line">        <span class="keyword">float</span> f = <span class="number">9.8f</span>F;</span><br><span class="line">        System.out.println(f);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 定义双精度浮点型变量 d</span></span><br><span class="line">        <span class="keyword">double</span> d = <span class="number">2.8</span>;</span><br><span class="line">        System.out.println(d);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 定义字符型变量 c</span></span><br><span class="line">        <span class="keyword">char</span> c = <span class="string">'L'</span>;</span><br><span class="line">        System.out.println(c);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 定义布尔型变量 b</span></span><br><span class="line">        <span class="keyword">boolean</span> b = <span class="keyword">true</span>;</span><br><span class="line">        System.out.println(b);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>long 类型：建议数据后加L表示。</p><p>float 类型：建议数据后加F表示。</p></blockquote><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><hr><ul><li>变量名称：在同一个大括号范围内，变量的名字不能相同。</li><li>变量赋值：定义的变量，不赋值不能使用。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;变量和数据类型&quot;&gt;&lt;a href=&quot;#变量和数据类型&quot; class=&quot;headerlink&quot; title=&quot;变量和数据类型&quot;&gt;&lt;/a&gt;变量和数据类型&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&quot;变量概述&quot;&gt;&lt;a href=&quot;#变量概述&quot; class=&quot;headerlink&quot;
      
    
    </summary>
    
    
      <category term="Java基础" scheme="https://error-codes.github.io/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="基础知识" scheme="https://error-codes.github.io/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
      <category term="Java" scheme="https://error-codes.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>数据结构与算法分析(Java语言描述)</title>
    <link href="https://error-codes.github.io/posts/d6f4a62d.html"/>
    <id>https://error-codes.github.io/posts/d6f4a62d.html</id>
    <published>2020-02-20T05:19:20.000Z</published>
    <updated>2020-02-20T08:53:42.718Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数学知识复习"><a href="#数学知识复习" class="headerlink" title="数学知识复习"></a>数学知识复习</h1><p>​        　本节列出一些需要记忆或是能够推导出的基本公式，并从推导过程复习基本的证明方法。</p><h3 id="指数"><a href="#指数" class="headerlink" title="指数"></a>指数</h3><script type="math/tex; mode=display">X^A X^B = X^{A+B}\\\frac {X^A} {X^B} = X^{A-B}\\(X^A)^B = X^{AB}\\X^N + X^N = 2X^N \neq X^{2N}\\2^N + 2^N = 2^{N+1}</script><h3 id="对数"><a href="#对数" class="headerlink" title="对数"></a>对数</h3><p>​        　在计算机科学中，除非有特别的声明，否则所有的对数都是以2为底的。</p><h5 id="定义1-1-X-A-B-当且仅当-log-x-B-A-。"><a href="#定义1-1-X-A-B-当且仅当-log-x-B-A-。" class="headerlink" title="　            　　定义1 .  1     　　$X^A = B$  当且仅当   ${log_x}^B = A$ 。"></a>　            　　定义1 .  1     　　$X^A = B$  当且仅当   ${log_x}^B = A$ 。</h5><p>　　　　　由该定义可以得到几个方便的等式。</p><h5 id="定理1-1"><a href="#定理1-1" class="headerlink" title="　            　　定理1 .  1"></a>　            　　定理1 .  1</h5><script type="math/tex; mode=display">{log_A}^B = \frac { {log_C}^B}{ {log_C}^A};　A,　B,　C>0,　A\neq1</script><h5 id="证明："><a href="#证明：" class="headerlink" title="　            　　证明："></a>　            　　证明：</h5><p>　　　　　令 $X = {log_C}^B,　Y = {log_C}^A,　以及　Z = {log_A}^B$。此时由对数的定义，$C^X = B,　C^Y = A$ 以及$ A^Z = B,$　联合这三个等式则产生　$(C^Y)^Z = C^X = B$。因此，$X = YZ,$　定理得证。</p><h5 id="定理1-2"><a href="#定理1-2" class="headerlink" title="　            　　定理1 .  2"></a>　            　　定理1 .  2</h5><script type="math/tex; mode=display">logAB = logA + logB;　A,　B > 0</script><h5 id="证明：-1"><a href="#证明：-1" class="headerlink" title="　            　　证明："></a>　            　　证明：</h5><p>　　　　　令 $X = logB,　Y = logA,　以及　Z = logAB$。此时由于假设默认的底为2，$2^X = A,　2^Y = B$ 以及$2^Z = B,$　联合最后的三个等式则有　$2^X2^Y = 2^Z = AB$。因此　$X + Y = Z,$　定理得证。    </p><p>　　　　　其他一些有用的公式如下，他们都能够用类似的方法推导。</p><script type="math/tex; mode=display">log\frac {A}{B} = logA - logB\\log(A^B) = BlogA\\logX < X　对所有的　X > 0 　成立\\log1 = 0,　log2 = 1, 　log1024 = 10,　log1048576 = 20</script><p>　</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;数学知识复习&quot;&gt;&lt;a href=&quot;#数学知识复习&quot; class=&quot;headerlink&quot; title=&quot;数学知识复习&quot;&gt;&lt;/a&gt;数学知识复习&lt;/h1&gt;&lt;p&gt;​        　本节列出一些需要记忆或是能够推导出的基本公式，并从推导过程复习基本的证明方法。&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="数据结构与算法分析" scheme="https://error-codes.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90/"/>
    
    
      <category term="Java" scheme="https://error-codes.github.io/tags/Java/"/>
    
      <category term="数学" scheme="https://error-codes.github.io/tags/%E6%95%B0%E5%AD%A6/"/>
    
      <category term="基础" scheme="https://error-codes.github.io/tags/%E5%9F%BA%E7%A1%80/"/>
    
      <category term="算法" scheme="https://error-codes.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>BayMax&#39;s Blog</title>
  
  <subtitle>个人博客，记录美好生活</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://error-codes.github.io/"/>
  <updated>2020-02-25T15:01:36.441Z</updated>
  <id>https://error-codes.github.io/</id>
  
  <author>
    <name>BayMax</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>数组</title>
    <link href="https://error-codes.github.io/posts/340249a9.html"/>
    <id>https://error-codes.github.io/posts/340249a9.html</id>
    <published>2020-02-25T14:57:00.000Z</published>
    <updated>2020-02-25T15:01:36.441Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><h1 id="1-数组定义和访问"><a href="#1-数组定义和访问" class="headerlink" title="1 .　数组定义和访问"></a>1 .　数组定义和访问</h1><h2 id="1-1-容器概念"><a href="#1-1-容器概念" class="headerlink" title="1 . 1　容器概念"></a>1 . 1　容器概念</h2><h3 id="案例分析"><a href="#案例分析" class="headerlink" title="案例分析"></a>案例分析</h3><p>现在需要统计某公司员工的工资情况，例如计算平均工资、找到最高工资等。假设该公司有50名员工，用前面所学 的知识，程序首先需要声明50个变量来分别记住每位员工的工资，然后在进行操作，这样做会显得很麻烦，而且错误率也会很高。因此我们可以使用容器进行操作。将所有的数据全部存储到一个容器中，统一操作。 </p><h3 id="容器概念"><a href="#容器概念" class="headerlink" title="容器概念"></a>容器概念</h3><ul><li><b>容器：</b>是将多个数据存储到一起，每个数据称为该容器的元素。</li><li><b>生活中的容器：</b>水杯，衣柜，教室。</li></ul><h2 id="1-2-数组概念"><a href="#1-2-数组概念" class="headerlink" title="1 . 2　数组概念"></a>1 . 2　数组概念</h2><ul><li><b>数组概念： </b>数组就是存储数据长度固定的容器，保证多个数据的数据类型要一致。</li></ul><h2 id="1-3-数组的定义"><a href="#1-3-数组的定义" class="headerlink" title="1 . 3　数组的定义"></a>1 . 3　数组的定义</h2><h3 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h3><ul><li><p><b>格式：</b></p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">数组存储的数据类型[] 数组名称 = <span class="keyword">new</span> 数组存储的数据类型[数组存储长度];</span><br></pre></td></tr></table></figure></li><li><p>数组定义格式详解：</p><ul><li>数组存储的数据类型： 创建的数组容器可以存储什么数据类型。 </li><li>[] : 表示数组。 </li><li>数组名字：为定义的数组起个变量名，满足标识符规范，可以使用名字操作数组。 </li><li>new：关键字，创建数组使用的关键字。 </li><li>数组存储的数据类型： 创建的数组容器可以存储什么数据类型。</li><li>[数组存储去长度]：数组的长度，表示数组容器中可以存储多少个元素。 </li><li><b>注意：数组有定长特性，长度一旦指定，不可更改。 </b><ul><li>和水杯道理相同，买了一个2升的水杯，总容量就是2升，不能多也不能少。</li></ul></li></ul></li><li><p>举例：<br>  定义可以存储3个整数的数组容器，代码如下：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</span><br></pre></td></tr></table></figure></li></ul><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><ul><li><p><b>格式：</b></p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">数据类型[] 数组名 = <span class="keyword">new</span> 数据类型[]&#123;元素<span class="number">1</span>,元素<span class="number">2</span>,元素<span class="number">3</span>...&#125;;</span><br></pre></td></tr></table></figure></li><li><p>举例：<br>  定义存储1，2，3，4，5整数的数组容器。</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br></pre></td></tr></table></figure></li></ul><h3 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h3><ul><li><p><b>格式：</b></p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">数据类型[] 数组名 = &#123;元素<span class="number">1</span>,元素<span class="number">2</span>,元素<span class="number">3</span>...&#125;;</span><br></pre></td></tr></table></figure></li><li><p>举例：</p><p>  定义存储1，2，3，4，5整数的数组容器</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] arr = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br></pre></td></tr></table></figure></li></ul><h2 id="1-4-数组的访问"><a href="#1-4-数组的访问" class="headerlink" title="1 . 4　数组的访问"></a>1 . 4　数组的访问</h2><ul><li><p>索引： 每一个存储到数组的元素，都会自动的拥有一个编号，从0开始，这个自动编号称为数组索引 (index)，可以通过数组的索引访问到数组中的元素。 </p></li><li><p>格式：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">数组名[索引]</span><br></pre></td></tr></table></figure></li><li><p><b>数组的长度属性：</b> 每个数组都具有长度，而且是固定的，Java中赋予了数组的一个属性，可以获取到数组的 长度，语句为： <kbd>数组名.length</kbd> ，属性length的执行结果是数组的长度，int类型结果。由次可以推断出，数 组的最大索引值为 <kbd>数组名.length-1 </kbd>。</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">    <span class="comment">// 打印数组的属性，输出结果是5</span></span><br><span class="line">    System.out.println(arr.length);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><b>索引访问数组中的元素：</b></p><ul><li>数组名[索引]=数值，为数组中的元素赋值。</li><li><p>变量=数组名[索引]，获取出数组中的元素。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 定义存储int类型数组，赋值元素1，2，3，4，5</span></span><br><span class="line">    <span class="keyword">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">    <span class="comment">// 为0索引元素赋值为6</span></span><br><span class="line">    arr[<span class="number">0</span>] = <span class="number">6</span>;</span><br><span class="line">    <span class="comment">// 获取数组0索引上的元素</span></span><br><span class="line">    <span class="keyword">int</span> i = arr[<span class="number">0</span>];</span><br><span class="line">    System.out.println(i);</span><br><span class="line">    <span class="comment">// 直接输出数组0索引元素</span></span><br><span class="line">    System.out.println(arr[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h1 id="2-数组原理内存图"><a href="#2-数组原理内存图" class="headerlink" title="2 . 　数组原理内存图"></a>2 . 　数组原理内存图</h1><h2 id="2-1-内存概述"><a href="#2-1-内存概述" class="headerlink" title="2 . 1　内存概述"></a>2 . 1　内存概述</h2><p>内存是计算机中的重要原件，临时存储区域，作用是运行程序。我们编写的程序是存放在硬盘中的，在硬盘中的程序是不会运行的，必须放进内存中才能运行，运行完毕后会清空内存。<br>Java虚拟机要运行程序，必须要对内存进行空间的分配和管理。 </p><h2 id="2-2-Java虚拟机的内存划分"><a href="#2-2-Java虚拟机的内存划分" class="headerlink" title="2 . 2　Java虚拟机的内存划分"></a>2 . 2　Java虚拟机的内存划分</h2><p>为了提高运算效率，就对空间进行了不同区域的划分，因为每一片区域都有特定的处理数据方式和内存管理方式。</p><ul><li><p>JVM的内存划分：</p><p>  | 区域名称   | 作用                                                       |<br>  | ————— | ————————————————————————————— |<br>  | 寄存器     | 给CPU使用，和开发无关。                                    |<br>  | 本地方法栈 | JVM在使用操作系统功能的时候使用，和开发无关。              |<br>  | 方法区     | 存储可以运行的Class文件。                                  |<br>  | 堆内存     | 存储对象或者数组，new来创建的，都存储在堆内存。            |<br>  | 方法栈     | 方法运行时使用的内存，比如main方法运行，进入方法栈中执行。 |</p></li></ul><h2 id="2-3-数组在内存中的存储"><a href="#2-3-数组在内存中的存储" class="headerlink" title="2 . 3　数组在内存中的存储"></a>2 . 3　数组在内存中的存储</h2><h3 id="一个数组内存图"><a href="#一个数组内存图" class="headerlink" title="一个数组内存图"></a>一个数组内存图</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</span><br><span class="line">    System.out.println(arr);<span class="comment">// [I@5f150435</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上方法执行，输出的结果是$ [I@5f150435 $，这个是什么呢？是数组在内存中的地址。new出来的内容，都是在堆 内存中存储的，而方法中的变量arr保存的是数组的地址。 </p><p><b>输出arr[0]，就会输出arr保存的内存地址中数组中0索引上的元素。</b></p><p><img src="https://s2.ax1x.com/2020/02/25/3tNfa9.png" alt="3tNfa9.png" style="zoom:80%;" /></p><h3 id="两个数组内存图"><a href="#两个数组内存图" class="headerlink" title="两个数组内存图"></a>两个数组内存图</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</span><br><span class="line">    <span class="keyword">int</span>[] arr2 = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br><span class="line">    System.out.println(arr);</span><br><span class="line">    System.out.println(arr2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.ax1x.com/2020/02/25/3tah1x.png" alt="3tah1x.png" style="zoom:80%;" /></p><h3 id="两个变量指向一个数组"><a href="#两个变量指向一个数组" class="headerlink" title="两个变量指向一个数组"></a>两个变量指向一个数组</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 定义数组，存储3个元素</span></span><br><span class="line">    <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</span><br><span class="line">    <span class="comment">// 数组索引进行赋值</span></span><br><span class="line">    arr[<span class="number">0</span>] = <span class="number">5</span>;</span><br><span class="line">    arr[<span class="number">1</span>] = <span class="number">6</span>;</span><br><span class="line">    arr[<span class="number">2</span>] = <span class="number">7</span>;</span><br><span class="line">    <span class="comment">// 输出3个索引上的元素值</span></span><br><span class="line">    System.out.println(arr[<span class="number">0</span>]);</span><br><span class="line">    System.out.println(arr[<span class="number">1</span>]);</span><br><span class="line">    System.out.println(arr[<span class="number">2</span>]);</span><br><span class="line">    <span class="comment">// 定义数组变量arr2，将arr的地址赋值给arr2</span></span><br><span class="line">    <span class="keyword">int</span>[] arr2 = arr;</span><br><span class="line">    arr2[<span class="number">1</span>] = <span class="number">9</span>;</span><br><span class="line">    System.out.println(arr[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.ax1x.com/2020/02/25/3twXOf.png" alt="3twXOf.png" style="zoom:80%;" /></p><h1 id="3-数组的常见操作"><a href="#3-数组的常见操作" class="headerlink" title="3 .　数组的常见操作"></a>3 .　数组的常见操作</h1><h2 id="3-1-数组越界异常"><a href="#3-1-数组越界异常" class="headerlink" title="3 . 1　数组越界异常"></a>3 . 1　数组越界异常</h2><p>观察一下代码，运行后会出现什么结果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line">    System.out.println(arr[<span class="number">3</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建数组，赋值3个元素，数组的索引就是0，1，2，没有3索引，因此我们不能访问数组中不存在的索引，程序运行后，将会抛出 <kbd>ArrayIndexOutOfBoundsException</kbd> 数组越界异常。在开发中，数组的越界异常是不能出现的，一旦出现了，就必须要修改我们编写的代码。</p><p><img src="https://s2.ax1x.com/2020/02/25/3tDrTS.png" alt="3tDrTS.png" style="zoom:80%;" /></p><h2 id="3-2-数组空指针异常"><a href="#3-2-数组空指针异常" class="headerlink" title="3 . 2　数组空指针异常"></a>3 . 2　数组空指针异常</h2><p>观察一下代码，运行后会出现什么结果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line">    arr = <span class="keyword">null</span>;</span><br><span class="line">    System.out.println(arr[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><kbd>arr = null</kbd> 这行代码，意味着变量arr将不会在保存数组的内存地址，也就不允许再操作数组了，因此运行的时候 会抛出 <kbd>NullPointerException</kbd> 空指针异常。在开发中，数组的越界异常是不能出现的，一旦出现了，就必须要修 改我们编写的代码。</p><p><img src="https://s2.ax1x.com/2020/02/25/3trDj1.png" alt="3trDj1.png" style="zoom:80%;" /></p><h3 id="空指针异常在内存图中的表现"><a href="#空指针异常在内存图中的表现" class="headerlink" title="空指针异常在内存图中的表现"></a>空指针异常在内存图中的表现</h3><p><img src="https://s2.ax1x.com/2020/02/25/3tss2j.png" alt="3tss2j.png" style="zoom:80%;" /></p><h2 id="3-3-数组遍历【重点】"><a href="#3-3-数组遍历【重点】" class="headerlink" title="3 . 3　数组遍历【重点】"></a>3 . 3　数组遍历【重点】</h2><ul><li><b>数组遍历：</b>将数组中的每个元素分别获取出来，就是遍历。遍历也是数组操作中的基石。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] arr = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line">    System.out.println(arr[<span class="number">0</span>]);</span><br><span class="line">    System.out.println(arr[<span class="number">1</span>]);</span><br><span class="line">    System.out.println(arr[<span class="number">2</span>]);</span><br><span class="line">    System.out.println(arr[<span class="number">3</span>]);</span><br><span class="line">    System.out.println(arr[<span class="number">4</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上代码是可以将数组中每个元素全部遍历出来，但是如果数组元素非常多，这种写法肯定不行，因此我们需要改造成循环的写法。数组的索引是 <kbd>0</kbd> 到 <kbd>lenght-1</kbd> ，可以作为循环的条件出现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] arr = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++)&#123;</span><br><span class="line">        System.out.println(arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-4-数组获取最大值元素"><a href="#3-4-数组获取最大值元素" class="headerlink" title="3 . 4　数组获取最大值元素"></a>3 . 4　数组获取最大值元素</h2><ul><li><b>最大值获取：</b>从数组的所有元素中找出最大值。 </li><li><b>实现思路： </b><ul><li>定义变量，保存数组0索引上的元素。</li><li>遍历数组，获取出数组中的每个元素。</li><li>将遍历到的元素和保存数组0索引上值的变量进行比较。</li><li>如果数组元素的值大于了变量的值，变量记录住新的值。</li><li>数组循环遍历结束，变量保存的就是数组中的最大值。</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] arr = &#123; <span class="number">5</span>, <span class="number">15</span>, <span class="number">2000</span>, <span class="number">10000</span>, <span class="number">100</span>, <span class="number">4000</span>&#125;;     </span><br><span class="line">    <span class="comment">// 定义变量，保存数组中0索引的元素</span></span><br><span class="line">    <span class="keyword">int</span> max = arr[<span class="number">0</span>];</span><br><span class="line">    <span class="comment">// 遍历数组，取出每个元素</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++)&#123;</span><br><span class="line">        <span class="comment">// 遍历到的元素和变量max比较</span></span><br><span class="line">        <span class="comment">// 如果数组元素大于max</span></span><br><span class="line">        <span class="keyword">if</span> (arr[i] &gt; max)&#123;</span><br><span class="line">            <span class="comment">// max记录住大值</span></span><br><span class="line">            max = arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">"数组最大值是： "</span> + max);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-5-数组反转"><a href="#3-5-数组反转" class="headerlink" title="3 . 5　数组反转"></a>3 . 5　数组反转</h2><ul><li><p><b>数组的反转： </b>数组中的元素颠倒顺序，例如原始数组为1,2,3,4,5，反转后的数组为5,4,3,2,1。</p></li><li><p><b>实现思想：</b>数组最远端的元素互换位置。</p><ul><li>实现反转，就需要将数组最远端元素位置交换。</li><li>定义两个变量，保存数组的最小索引和最大索引。</li><li>两个索引上的元素交换位置</li><li>最小索引++，最大索引—，再次交换位置。</li><li><p>最小索引超过了最大索引，数组反转操作结束。</p><p><img src="https://s2.ax1x.com/2020/02/25/3t6vgH.png" alt="3t6vgH.png" style="zoom:80%;" /></p></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] arr = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line">    <span class="comment">/*       </span></span><br><span class="line"><span class="comment">        循环中定义变量min=0最小索引</span></span><br><span class="line"><span class="comment">        max=arr.length‐1最大索引</span></span><br><span class="line"><span class="comment">        min++,max--</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> min = <span class="number">0</span>, max = arr.length - <span class="number">1</span>; min &lt;= max; min++, max‐‐)&#123;</span><br><span class="line">        <span class="comment">// 利用第三方变量完成数组中的元素交换</span></span><br><span class="line">        <span class="keyword">int</span> temp = arr[min];</span><br><span class="line">        arr[min] = arr[max];</span><br><span class="line">        arr[max] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">       <span class="comment">// 反转后，遍历数组</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++)&#123;</span><br><span class="line">        System.out.println(arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="4-数组作为方法参数和返回值"><a href="#4-数组作为方法参数和返回值" class="headerlink" title="4 .　数组作为方法参数和返回值"></a>4 .　数组作为方法参数和返回值</h1><h2 id="4-1-数组作为方法参数"><a href="#4-1-数组作为方法参数" class="headerlink" title="4 . 1　数组作为方法参数"></a>4 . 1　数组作为方法参数</h2><p>以前的方法中学习了方法的参数和返回值，但是使用的都是基本数据类型。那么作为引用类型的数组能否作为方法的参数进行传递呢，当然是可以的。</p><ul><li><b>数组作为方法参数传递，传递的参数是数组内存的地址。</b></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] arr = &#123; <span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>&#125;;</span><br><span class="line">    <span class="comment">// 调用方法，传递数组</span></span><br><span class="line">    printArray(arr);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    创建方法，方法接收数组类型的参数</span></span><br><span class="line"><span class="comment">    进行数组的遍历</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printArray</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++)&#123;</span><br><span class="line">        System.out.println(arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.ax1x.com/2020/02/25/3tWOcF.png" alt="3tWOcF.png" style="zoom:80%;" /></p><h2 id="4-2-数组作为方法返回值"><a href="#4-2-数组作为方法返回值" class="headerlink" title="4 . 2　数组作为方法返回值"></a>4 . 2　数组作为方法返回值</h2><ul><li>数组作为方法的返回值，返回的是数组的内存地址</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 调用方法，接收数组的返回值</span></span><br><span class="line">    <span class="comment">// 接收到的是数组的内存地址     </span></span><br><span class="line">    <span class="keyword">int</span>[] arr = getArray();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++)&#123;</span><br><span class="line">        System.out.println(arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    创建方法，返回值是数组类型</span></span><br><span class="line"><span class="comment">    return返回数组的地址</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] getArray()&#123;</span><br><span class="line">    <span class="keyword">int</span>[] arr = &#123; <span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>&#125;;     </span><br><span class="line">    <span class="comment">// 返回数组的地址，返回到调用者</span></span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s2.ax1x.com/2020/02/25/3t5h80.png" alt="3t5h80.png" style="zoom:80%;" /></p><h2 id="4-3-方法的参数类型区别"><a href="#4-3-方法的参数类型区别" class="headerlink" title="4 . 3　方法的参数类型区别"></a>4 . 3　方法的参数类型区别</h2><h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><p><b>1 . 分析下列程序代码，计算输出结果。</b></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">2</span>;</span><br><span class="line">    System.out.println(a);</span><br><span class="line">    System.out.println(b);</span><br><span class="line">    change(a, b);</span><br><span class="line">    System.out.println(a);</span><br><span class="line">    System.out.println(b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    a = a + b;</span><br><span class="line">    b = b + a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><b>2 . 分析下列程序代码，计算输出结果。</b></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] arr = &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>&#125;;</span><br><span class="line">    System.out.println(arr[<span class="number">0</span>]);</span><br><span class="line">    change(arr);</span><br><span class="line">    System.out.println(arr[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span>&#123;</span><br><span class="line">    arr[<span class="number">0</span>] = <span class="number">200</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>总结: </p><p><b>方法的参数为基本类型时，传递的是数据值。</b></p><p><b>方法的参数为引用类型时，传递的是地址值。</b></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;数组&quot;&gt;&lt;a href=&quot;#数组&quot; class=&quot;headerlink&quot; title=&quot;数组&quot;&gt;&lt;/a&gt;数组&lt;/h1&gt;&lt;h1 id=&quot;1-数组定义和访问&quot;&gt;&lt;a href=&quot;#1-数组定义和访问&quot; class=&quot;headerlink&quot; title=&quot;1 .　数组定
      
    
    </summary>
    
    
      <category term="Java基础" scheme="https://error-codes.github.io/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="基础知识" scheme="https://error-codes.github.io/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
      <category term="Java" scheme="https://error-codes.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>方法回顾</title>
    <link href="https://error-codes.github.io/posts/b3af7996.html"/>
    <id>https://error-codes.github.io/posts/b3af7996.html</id>
    <published>2020-02-24T11:34:00.000Z</published>
    <updated>2020-02-24T12:09:24.877Z</updated>
    
    <content type="html"><![CDATA[<h1 id="方法回顾"><a href="#方法回顾" class="headerlink" title="方法回顾"></a>方法回顾</h1><h2 id="1-1-方法的定义和调用"><a href="#1-1-方法的定义和调用" class="headerlink" title="1 . 1　方法的定义和调用"></a>1 . 1　方法的定义和调用</h2><p>前面的文章中，使用过嵌套循环输出矩形，控制台打印出矩形就可以了，因此将方法定义为 <kbd>void</kbd>，没有返回值。 在主方法 <kbd>main</kbd>中直接被调用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Method_Demo1</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        print();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">8</span>; j++)&#123;</span><br><span class="line">                System.out.print(<span class="string">"*"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><kbd>print</kbd>方法被 <kbd>main</kbd> 方法调用后直接输出结果，而 <kbd>main</kbd> 方法并不需要 <kbd>print</kbd> 方法的执行结果，所以被定义为 <kbd>void </kbd>。</p><h2 id="1-2-定义方法的格式详解"><a href="#1-2-定义方法的格式详解" class="headerlink" title="1 . 2　定义方法的格式详解"></a>1 . 2　定义方法的格式详解</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">修饰符 返回值类型 方法名(参数列表)&#123;</span><br><span class="line">    <span class="comment">//代码省略...</span></span><br><span class="line">    <span class="keyword">return</span> 结果;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><b>修饰符：</b> public static 固定写法。</li><li><b>返回值类型：</b> 表示方法运行的结果的数据类型，方法执行后将结果返回到调用者。</li><li><b>参数列表：</b>方法在运算过程中的未知数据，调用者调用方法时传递。</li><li><b>return：</b>将方法执行后的结果带给调用者，方法执行到 <kbd>return</kbd> ，整体方法运行结束。</li></ul><blockquote><p>小贴士：return <b>结果; </b>这里的”结果”在开发中，我们正确的叫法成为<b>方法的返回值 。</b></p></blockquote><h2 id="1-3-定义方法的两个明确"><a href="#1-3-定义方法的两个明确" class="headerlink" title="1 . 3　定义方法的两个明确"></a>1 . 3　定义方法的两个明确</h2><ul><li><b>需求：</b>定义方法实现两个整数的求和计算。<ul><li><b>明确返回值类型：</b>方法计算的是整数的求和，结果也必然是个整数，返回值类型定义为int类型。</li><li><b>明确参数列表：</b>计算哪两个整数的和，并不清楚，但可以确定是整数，参数列表可以定义两个int类型的变量，由调用者调用方法时传递。</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Method_Demo2</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 调用方法getSum，传递两个整数，这里传递的实际数据又称为实际参数</span></span><br><span class="line">        <span class="comment">// 并接收方法计算后的结果，返回值</span></span><br><span class="line">        <span class="keyword">int</span> sum = getSum(<span class="number">5</span>, <span class="number">6</span>);</span><br><span class="line">        System.out.println(sum);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        定义计算两个整数和的方法</span></span><br><span class="line"><span class="comment">        返回值类型，计算结果是int</span></span><br><span class="line"><span class="comment">        参数：不确定数据求和，定义int参数.参数又称为形式参数</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getSum</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序执行，主方法 <kbd>main</kbd>调用 <kbd>getSum</kbd> 方法，传递了实际数据 <kbd>5和6</kbd> ，两个变量 <kbd>a和b</kbd> 接收到的就是实际参数，并 将计算后的结果返回，主方法 <kbd>main</kbd> 中的变量 <kbd>sum</kbd> 接收的就是方法的返回值。 </p><h2 id="1-4-调用方法的流程图解"><a href="#1-4-调用方法的流程图解" class="headerlink" title="1 . 4　调用方法的流程图解"></a>1 . 4　调用方法的流程图解</h2><p><img src="https://s2.ax1x.com/2020/02/24/3GZZng.png" alt="3GZZng.png" style="zoom:80%;" /></p><h2 id="1-5-定义方法练习"><a href="#1-5-定义方法练习" class="headerlink" title="1 . 5　定义方法练习"></a>1 . 5　定义方法练习</h2><h3 id="练习一"><a href="#练习一" class="headerlink" title="练习一"></a>练习一</h3><p><b>比较两个整数是否相同</b></p><ul><li>分析：定义方法实现功能，需要有两个明确，即<kbd>返回值</kbd>和<kbd>参数列表</kbd>。<ul><li><b>明确返回值：</b>比较整数，比较的结果只有两种可能，相同或不同，因此结果是布尔类型，比较的结果相同为true。 </li><li><b>明确参数列表：</b>比较的两个整数不确定，所以默认定义两个int类型的参数。</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Method_Demo3</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 调用方法compare，传递两个整数 </span></span><br><span class="line">        <span class="comment">// 并接收方法计算后的结果，布尔值</span></span><br><span class="line">        <span class="keyword">boolean</span> bool = compare(<span class="number">3</span>, <span class="number">8</span>);</span><br><span class="line">        System.out.println(bool);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* </span></span><br><span class="line"><span class="comment">        定义比较两个整数是否相同的方法</span></span><br><span class="line"><span class="comment">        返回值类型，比较的结果布尔类型 </span></span><br><span class="line"><span class="comment">        参数：不确定参与比较的两个整数</span></span><br><span class="line"><span class="comment">    */</span> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">compare</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123; </span><br><span class="line">        <span class="keyword">if</span> (a == b)&#123;  </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>; </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;  </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="练习二"><a href="#练习二" class="headerlink" title="练习二"></a>练习二</h3><p><b>计算1+2+3…+100的和</b></p><ul><li>分析：定义方法实现功能，需要有两个明确，即 <kbd>返回值</kbd> 和 <kbd>参数</kbd> 。 <ul><li>明确返回值：1~100的求和，计算后必然还是整数，返回值类型是int。</li><li>明确参数：需求中已知到计算的数据，没有未知的数据，不定义参数。</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Method_Demo4</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 调用方法getSum </span></span><br><span class="line">        <span class="comment">// 并接收方法计算后的结果，整数</span></span><br><span class="line">        <span class="keyword">int</span> sum = getSum();  </span><br><span class="line">        System.out.println(sum); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*   </span></span><br><span class="line"><span class="comment">        定义计算1~100的求和方法 </span></span><br><span class="line"><span class="comment">        返回值类型，计算结果整数int  </span></span><br><span class="line"><span class="comment">        参数：没有不确定数据</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getSum</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 定义变量保存求和</span></span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>; </span><br><span class="line">        <span class="comment">// 从1开始循环，到100结束 </span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++)&#123; </span><br><span class="line">            sum = sum + i;  </span><br><span class="line">        &#125;   </span><br><span class="line">        <span class="keyword">return</span> sum; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="练习三"><a href="#练习三" class="headerlink" title="练习三"></a>练习三</h3><p><b>实现不定次数打印</b></p><ul><li>分析：定义方法实现功能，需要有两个明确，即 <kbd>返回值</kbd> 和 <kbd>参数</kbd>。<ul><li><b>明确返回值：</b>方法中打印出 <kbd>HelloWorld</kbd> 即可，没有计算结果，返回值类型 <kbd>void</kbd>。 </li><li><b>明确参数：</b>打印几次不清楚，参数定义一个整型参数。</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Method_Demo5</span></span>&#123; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//调用方法printHelloWorld，传递整数 </span></span><br><span class="line">        printHelloWorld(<span class="number">9</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        定义打印HelloWorld方法</span></span><br><span class="line"><span class="comment">        返回值类型，计算没有结果 void</span></span><br><span class="line"><span class="comment">        参数：不确定打印几次</span></span><br><span class="line"><span class="comment">    */</span> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printHelloWorld</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123; </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123; </span><br><span class="line">            System.out.println(<span class="string">"HelloWorld"</span>); </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-6-定义方法的注意事项"><a href="#1-6-定义方法的注意事项" class="headerlink" title="1 . 6　定义方法的注意事项"></a>1 . 6　定义方法的注意事项</h2><ul><li>定义位置，类中方法外面。 </li><li>返回值类型，必须要和 <kbd>return</kbd> 语句返回的类型相同，否则编译失败 。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回值类型要求是int</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getSum</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">5</span>;<span class="comment">// 正确，int类型</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1.2</span>;<span class="comment">// 错误，类型不匹配</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;<span class="comment">// 错误，类型不匹配</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>不能在 <kbd>return</kbd> 后面写代码， <kbd>return</kbd> 意味着方法结束，所有后面的代码永远不会执行，属于无效代码。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getSum</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">    System.out.println(<span class="string">"Hello"</span>);<span class="comment">// 错误，return已经结束，这里不会执行，无效代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-7-调用方法的三种格式"><a href="#1-7-调用方法的三种格式" class="headerlink" title="1 . 7　调用方法的三种格式"></a>1 . 7　调用方法的三种格式</h2><ul><li><b>直接调用：</b>直接写方法名调用</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    print();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"方法被调用"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><b>赋值调用：</b>调用方法，在方法前面定义变量，接收方法返回值</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum = getSum(<span class="number">5</span>,<span class="number">6</span>);</span><br><span class="line">    System.out.println(sum);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getSum</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><b>输出语句调用：</b> </p><ul><li><p>在输出语句中调用方法，<kbd> System.out.println(方法名()) </kbd>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    System.out.println(getSum(<span class="number">5</span>,<span class="number">6</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getSum</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>不能用输出语句调用 <kbd>void</kbd> 类型的方法。因为方法执行后没有结果，也就打印不出任何内容。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    System.out.println(printHello());<span class="comment">// 错误，不能输出语句调用void类型方法</span></span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printHello</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"Hello"</span>); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="1-8-方法重载"><a href="#1-8-方法重载" class="headerlink" title="1 . 8　方法重载"></a>1 . 8　方法重载</h2><ul><li>方法重载：指在同一个类中，允许存在一个以上的同名方法，只要它们的参数列表不同即可，与修饰符和返回值类型无关。</li><li>参数列表：个数不同，数据类型不同，顺序不同。 </li><li>重载方法调用：JVM通过方法的参数列表，调用不同的方法。 </li></ul><h2 id="1-9-方法重载练习"><a href="#1-9-方法重载练习" class="headerlink" title="1 . 9　方法重载练习"></a>1 . 9　方法重载练习</h2><h3 id="练习一-1"><a href="#练习一-1" class="headerlink" title="练习一"></a>练习一</h3><p>比较两个数据是否相等。参数类型分别为两个 <kbd>byte</kbd> 类型，两个 <kbd>short</kbd> 类型，两个 <kbd>int</kbd> 类型，两个 <kbd>long</kbd> 类型，并 在 <kbd>main</kbd> 方法中进行测试。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Method_Demo6</span></span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 定义不同数据类型的变量</span></span><br><span class="line">        <span class="keyword">byte</span> a = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">byte</span> b = <span class="number">20</span>;</span><br><span class="line">        <span class="keyword">short</span> c = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">short</span> d = <span class="number">20</span>;</span><br><span class="line">        <span class="keyword">int</span> e = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">int</span> f = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">long</span> g = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">long</span> h = <span class="number">20</span>;</span><br><span class="line">        <span class="comment">// 调用</span></span><br><span class="line">        System.out.println(compare(a, b));</span><br><span class="line">        System.out.println(compare(c, d));</span><br><span class="line">        System.out.println(compare(e, f));</span><br><span class="line">        System.out.println(compare(g, h));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 两个byte类型的</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">compare</span><span class="params">(<span class="keyword">byte</span> a, <span class="keyword">byte</span> b)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"byte"</span>); </span><br><span class="line">        <span class="keyword">return</span> a == b;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 两个short类型的</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">compare</span><span class="params">(<span class="keyword">short</span> a, <span class="keyword">short</span> b)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"short"</span>);</span><br><span class="line">        <span class="keyword">return</span> a == b;</span><br><span class="line">    &#125; </span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 两个int类型的     </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">compare</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"int"</span>);</span><br><span class="line">        <span class="keyword">return</span> a == b;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 两个long类型的</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">compare</span><span class="params">(<span class="keyword">long</span> a, <span class="keyword">long</span> b)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"long"</span>);</span><br><span class="line">        <span class="keyword">return</span> a == b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="练习二-1"><a href="#练习二-1" class="headerlink" title="练习二"></a>练习二</h3><p>判断哪些方法是重载关系。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">(<span class="keyword">int</span> a)</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">(<span class="keyword">double</span> a,<span class="keyword">int</span> b)</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">double</span> b)</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">double</span> d)</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">OPEN</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="练习三-1"><a href="#练习三-1" class="headerlink" title="练习三"></a>练习三</h3><p>模拟输出语句中的 <kbd>println</kbd> 方法效果，传递什么类型的数据就输出什么类型的数据，只允许定义一个方法名 <kbd>println</kbd> 。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Method_Demo7</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">println</span><span class="params">(<span class="keyword">byte</span> a)</span></span>&#123;</span><br><span class="line">        System.out.println(a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">println</span><span class="params">(<span class="keyword">short</span> a)</span></span>&#123;</span><br><span class="line">        System.out.println(a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">println</span><span class="params">(<span class="keyword">int</span> a)</span></span>&#123;</span><br><span class="line">        System.out.println(a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">println</span><span class="params">(<span class="keyword">long</span> a)</span></span>&#123;</span><br><span class="line">        System.out.println(a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">println</span><span class="params">(<span class="keyword">float</span> a)</span></span>&#123;</span><br><span class="line">        System.out.println(a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">println</span><span class="params">(<span class="keyword">double</span> a)</span></span>&#123;</span><br><span class="line">        System.out.println(a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">println</span><span class="params">(<span class="keyword">char</span> a)</span></span>&#123;</span><br><span class="line">        System.out.println(a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">println</span><span class="params">(<span class="keyword">boolean</span> a)</span></span>&#123;</span><br><span class="line">        System.out.println(a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">println</span><span class="params">(String a)</span></span>&#123;</span><br><span class="line">        System.out.println(a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;方法回顾&quot;&gt;&lt;a href=&quot;#方法回顾&quot; class=&quot;headerlink&quot; title=&quot;方法回顾&quot;&gt;&lt;/a&gt;方法回顾&lt;/h1&gt;&lt;h2 id=&quot;1-1-方法的定义和调用&quot;&gt;&lt;a href=&quot;#1-1-方法的定义和调用&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
    
      <category term="Java基础" scheme="https://error-codes.github.io/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="基础知识" scheme="https://error-codes.github.io/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
      <category term="Java" scheme="https://error-codes.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>流程控制语句</title>
    <link href="https://error-codes.github.io/posts/70591cd5.html"/>
    <id>https://error-codes.github.io/posts/70591cd5.html</id>
    <published>2020-02-23T11:08:00.000Z</published>
    <updated>2020-02-24T12:14:37.478Z</updated>
    
    <content type="html"><![CDATA[<h1 id="流程控制语句"><a href="#流程控制语句" class="headerlink" title="流程控制语句"></a>流程控制语句</h1><h2 id="1-流程控制"><a href="#1-流程控制" class="headerlink" title="1 .　流程控制"></a>1 .　流程控制</h2><h3 id="1-1-概述"><a href="#1-1-概述" class="headerlink" title="1 . 1　概述"></a>1 . 1　概述</h3><p>在一个程序执行的过程中，各条语句的执行顺序对程序的结果是有直接影响的。也就是说，程序的流程对运行结果有直接的影响。所以，我们必须清楚每条语句的执行流程。而且，很多时候我们要通过控制语句的执行顺序来实现我们要完成的功能。</p><h3 id="1-2-顺序结构"><a href="#1-2-顺序结构" class="headerlink" title="1 . 2　顺序结构"></a>1 . 2　顺序结构</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 顺序执行，根据编写顺序，从上到下依次运行</span></span><br><span class="line">    System.out.println(<span class="number">1</span>);</span><br><span class="line">    System.out.println(<span class="number">2</span>);</span><br><span class="line">    System.out.println(<span class="number">3</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-判断语句"><a href="#2-判断语句" class="headerlink" title="2 .　判断语句"></a>2 .　判断语句</h2><h3 id="2-1-判断语句-1-—-if"><a href="#2-1-判断语句-1-—-if" class="headerlink" title="2 . 1　判断语句 1 — if"></a>2 . 1　判断语句 1 — if</h3><ul><li><p><b>if 语句第一种格式：</b>if</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(关系表达式)&#123;</span><br><span class="line">    语句体;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><b>执行流程</b></p><ul><li>首先判断关系表达式看其结果是true还是false。</li><li>如果是true，就执行语句体。</li><li>如果是false，就不执行语句体。</li></ul></li></ul><p><img src="https://s2.ax1x.com/2020/02/23/31lZbF.png" alt="31lZbF.png" style="zoom:80%;" /></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"开始"</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 定义两个变量</span></span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line">    <span class="comment">// 变量使用if判断</span></span><br><span class="line">    <span class="keyword">if</span>(a == b)&#123;</span><br><span class="line">        System.out.println(<span class="string">"a 等于 b"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> c = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">if</span>(a == c)&#123;</span><br><span class="line">        System.out.println(<span class="string">"a 等于 c"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">"结束"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-判断语句-2-—-if…else"><a href="#2-2-判断语句-2-—-if…else" class="headerlink" title="2 . 2　判断语句 2 — if…else"></a>2 . 2　判断语句 2 — if…else</h3><ul><li><p><b>if 语句第二种格式：</b>if…else</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(关系表达式)&#123;</span><br><span class="line">    语句体<span class="number">1</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    语句体<span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><b>执行流程</b></p><ul><li>首先判断关系表达式看其结果是true还是false。</li><li>如果是true，就执行语句体1。</li><li>如果是false，就执行语句体2。</li></ul></li></ul><p><img src="https://s2.ax1x.com/2020/02/23/31lZbF.png" alt="31lZbF.png" style="zoom:80%;" /></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 判断给定的数据是奇数还是偶数</span></span><br><span class="line">    <span class="comment">// 定义变量</span></span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(a % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">        System.out.println(<span class="string">"a是偶数"</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"a是奇数"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">"结束"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-判断语句-3-—-if…else-if…else"><a href="#2-3-判断语句-3-—-if…else-if…else" class="headerlink" title="2 . 3　判断语句 3 — if…else if…else"></a>2 . 3　判断语句 3 — if…else if…else</h3><ul><li><p><b>if 语句第三种格式：</b>if…else if…else</p>  <figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(判断条件<span class="number">1</span>)&#123;</span><br><span class="line">    执行语句<span class="number">1</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(判断条件<span class="number">2</span>)&#123;</span><br><span class="line">    执行语句<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(判断条件n)&#123;</span><br><span class="line">    执行语句n;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    执行语句n+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><b>执行流程</b></p><ul><li>首先判断关系表达式1看其结果是true还是false。</li><li>如果是true，就执行语句体1。</li><li>如果是false，就继续判断关系表达式2看其结果是true还是false</li><li>如果是true，就执行语句体2。</li><li>如果是false，就继续判断关系表达式…看其结果是true还是false。</li><li>… </li><li>如果没有任何关系表达式为true，就执行语句体n+1。</li></ul></li></ul><p><img src="https://s2.ax1x.com/2020/02/23/31dFns.png" alt="31dFns.png" style="zoom:80%;" /></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    <span class="comment">// x和y的关系满足如下： </span></span><br><span class="line">    <span class="comment">// x &gt;= 3    y = 2x + 1;</span></span><br><span class="line">    <span class="comment">//‐1 &lt;= x &lt; 3    y = 2x;</span></span><br><span class="line">    <span class="comment">// x &lt;= ‐1    y = 2x – 1;</span></span><br><span class="line">    <span class="comment">// 根据给定的x的值，计算出y的值并输出。</span></span><br><span class="line">    <span class="comment">// 定义变量</span></span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">int</span> y;</span><br><span class="line">    <span class="keyword">if</span>(x&gt;= <span class="number">3</span>)&#123;</span><br><span class="line">        y = <span class="number">2</span> * x + <span class="number">1</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(x &gt;= ‐<span class="number">1</span> &amp;&amp; x &lt; <span class="number">3</span>)&#123;</span><br><span class="line">        y = <span class="number">2</span> * x;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        y = <span class="number">2</span> * x ‐ <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">"y的值是："</span>+y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-4-语句练习"><a href="#2-4-语句练习" class="headerlink" title="2 . 4　语句练习"></a>2 . 4　语句练习</h3><ul><li><p>指定考试成绩，判断学生等级</p><ul><li>$ 90~100 $    优秀</li><li>$ 80~89 $    好</li><li>$ 70~79 $    良</li><li>$ 60~69 $    及格</li><li><p>$ 60 $以下    不及格</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> score = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">if</span>(score&lt;<span class="number">0</span> || score&gt;<span class="number">100</span>)&#123;</span><br><span class="line">        System.out.println(<span class="string">"你的成绩是错误的"</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(score&gt;=<span class="number">90</span> &amp;&amp; score&lt;=<span class="number">100</span>)&#123;</span><br><span class="line">        System.out.println(<span class="string">"你的成绩属于优秀"</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(score&gt;=<span class="number">80</span> &amp;&amp; score&lt;<span class="number">90</span>)&#123;</span><br><span class="line">        System.out.println(<span class="string">"你的成绩属于好"</span>); </span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(score&gt;=<span class="number">70</span> &amp;&amp; score&lt;<span class="number">80</span>)&#123;</span><br><span class="line">        System.out.println(<span class="string">"你的成绩属于良"</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(score&gt;=<span class="number">60</span> &amp;&amp; score&lt;<span class="number">70</span>)&#123;</span><br><span class="line">        System.out.println(<span class="string">"你的成绩属于及格"</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"你的成绩属于不及格"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="2-5-if语句和三元运算符的互换"><a href="#2-5-if语句和三元运算符的互换" class="headerlink" title="2 . 5　if语句和三元运算符的互换"></a>2 . 5　if语句和三元运算符的互换</h3><p>在某些简单的应用中，if语句是可以和三元运算符互换使用的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">20</span>; </span><br><span class="line">    <span class="comment">// 定义变量，保存a和b的较大值</span></span><br><span class="line">    <span class="keyword">int</span> c; </span><br><span class="line">    <span class="keyword">if</span>(a &gt; b)&#123;</span><br><span class="line">        c = a;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        c = b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//可以上述功能改写为三元运算符形式</span></span><br><span class="line">    c = a &gt; b ? a:b; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-选择语句"><a href="#3-选择语句" class="headerlink" title="3 .　选择语句"></a>3 .　选择语句</h2><h3 id="3-1-选择语句-—-switch"><a href="#3-1-选择语句-—-switch" class="headerlink" title="3 . 1　选择语句 — switch"></a>3 . 1　选择语句 — switch</h3><ul><li><p><b>switch语句格式：</b></p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(表达式)&#123;</span><br><span class="line">    <span class="keyword">case</span> 常量值<span class="number">1</span>:</span><br><span class="line">        语句体<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> 常量值<span class="number">2</span>:</span><br><span class="line">        语句体<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        语句体n+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><b>执行流程</b></p><ul><li>首先计算出表达式的值。</li><li>其次，和case依次比较，一旦有对应的值，就会执行相应的语句，在执行的过程中，遇到break就会结束。</li><li>最后，如果所有的case都和表达式的值不匹配，就会执行default语句体部分，然后程序结束掉。</li></ul></li></ul><p><img src="https://s2.ax1x.com/2020/02/23/31DfJ0.png" alt="31DfJ0.png" style="zoom:80%;" /></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 定义变量，判断是星期几</span></span><br><span class="line">    <span class="keyword">int</span> weekday = <span class="number">6</span>;</span><br><span class="line">    <span class="comment">// switch语句实现选择</span></span><br><span class="line">    <span class="keyword">switch</span>(weekday)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            System.out.println(<span class="string">"星期一"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            System.out.println(<span class="string">"星期二"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">            System.out.println(<span class="string">"星期三"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">            System.out.println(<span class="string">"星期四"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">            System.out.println(<span class="string">"星期五"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">            System.out.println(<span class="string">"星期六"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">            System.out.println(<span class="string">"星期日"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            System.out.println(<span class="string">"你输入的数字有误"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>switch语句中，表达式的数据类型，可以是byte，short，int，char，enum（枚举），$ JDK7 $后可以接收字符串。 </p><h3 id="3-2-case的穿透性"><a href="#3-2-case的穿透性" class="headerlink" title="3 . 2 　case的穿透性"></a>3 . 2 　case的穿透性</h3><p>在switch语句中，如果case的后面不写break，将出现穿透现象，也就是不会在判断下一个case的值，直接向后运 行，直到遇到break，或者整体switch结束。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">switch</span> (i)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">            System.out.println(<span class="string">"执行case0"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">            System.out.println(<span class="string">"执行case5"</span>);</span><br><span class="line">        <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">            System.out.println(<span class="string">"执行case10"</span>);</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            System.out.println(<span class="string">"执行default"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述程序中，执行case5后，由于没有break语句，程序会一直向后走，不会在判断case，也不会理会break，直接 运行完整体switch。<br>由于case存在穿透性，因此初学者在编写switch语句时，必须要写上break。 </p><h2 id="4-循环语句"><a href="#4-循环语句" class="headerlink" title="4 .　循环语句"></a>4 .　循环语句</h2><h3 id="4-1-循环概述"><a href="#4-1-循环概述" class="headerlink" title="4 . 1　循环概述"></a>4 . 1　循环概述</h3><p>循环语句可以在满足循环条件的情况下，反复执行某一段代码，这段被重复执行的代码被称为循环体语句，当反复 执行这个循环体时，需要在合适的时候把循环判断条件修改为false，从而结束循环，否则循环将一直执行下去，形成死循环。 </p><h3 id="4-2-循环语句-1-—-for"><a href="#4-2-循环语句-1-—-for" class="headerlink" title="4 . 2　循环语句 1 — for"></a>4 . 2　循环语句 1 — for</h3><ul><li><p><b>for循环语句格式：</b></p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(初始化表达式①; 布尔表达式②; 步进表达式④)&#123;</span><br><span class="line">    循环体③</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><b>执行流程</b></p><ul><li>执行顺序：①②③④&gt;②③④&gt;②③④…②不满足为止。</li><li>①负责完成循环变量初始化。</li><li>②负责判断是否满足循环条件，不满足则跳出循环。</li><li>③具体执行的语句。</li><li>④循环后，循环条件所涉及变量的变化情况。</li></ul></li></ul><p><img src="https://s2.ax1x.com/2020/02/23/31yVsS.png" alt="31yVsS.png" style="zoom:80%;" /></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 控制台输出10次HelloWorld，不使用循环</span></span><br><span class="line">    System.out.println(<span class="string">"HelloWorld"</span>);</span><br><span class="line">    System.out.println(<span class="string">"HelloWorld"</span>);</span><br><span class="line">    System.out.println(<span class="string">"HelloWorld"</span>);</span><br><span class="line">    System.out.println(<span class="string">"HelloWorld"</span>);</span><br><span class="line">    System.out.println(<span class="string">"HelloWorld"</span>);</span><br><span class="line">    System.out.println(<span class="string">"HelloWorld"</span>);</span><br><span class="line">    System.out.println(<span class="string">"HelloWorld"</span>);</span><br><span class="line">    System.out.println(<span class="string">"HelloWorld"</span>);</span><br><span class="line">    System.out.println(<span class="string">"HelloWorld"</span>);</span><br><span class="line">    System.out.println(<span class="string">"HelloWorld"</span>);</span><br><span class="line">    System.out.println(<span class="string">"‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐"</span>);</span><br><span class="line">    <span class="comment">// 用循环改进，循环10次</span></span><br><span class="line">    <span class="comment">// 定义变量从0开始，循环条件为&lt;10</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; <span class="number">10</span>; x++)&#123;</span><br><span class="line">        System.out.println(<span class="string">"HelloWorld"</span>+x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>循环练习：使用循环，计算1-100之间的偶数和</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 1.定义一个初始化变量,记录累加求和,初始值为0</span></span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 2.利用for循环获取1‐100之间的数字</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++)&#123;</span><br><span class="line">        <span class="comment">// 3.判断获取的数组是奇数还是偶数</span></span><br><span class="line">        <span class="keyword">if</span>(i % <span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="comment">// 4.如果是偶数就累加求和</span></span><br><span class="line">            sum += i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 5.循环结束之后,打印累加结果</span></span><br><span class="line">    System.out.println(<span class="string">"sum:"</span>+sum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-3-循环语句-2-—-while"><a href="#4-3-循环语句-2-—-while" class="headerlink" title="4 . 3　循环语句 2 — while"></a>4 . 3　循环语句 2 — while</h3><ul><li><p><b>while循环语句格式：</b></p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">初始化表达式①</span><br><span class="line">    <span class="keyword">while</span>(布尔表达式②)&#123;</span><br><span class="line">        循环体③</span><br><span class="line">        步进表达式④</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><b>执行流程</b></p><ul><li>执行顺序：①②③④&gt;②③④&gt;②③④…②不满足为止。</li><li>①负责完成循环变量初始化。 </li><li>②负责判断是否满足循环条件，不满足则跳出循环。 </li><li>③具体执行的语句。 </li><li><p>④循环后，循环变量的变化情况。</p><p><img src="https://s2.ax1x.com/2020/02/23/316LnO.png" alt="316LnO.png" style="zoom:80%;" /></p></li></ul></li></ul><p>while循环输出10次HelloWorld</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    <span class="comment">// while循环实现打印10次HelloWorld</span></span><br><span class="line">    <span class="comment">// 定义初始化变量</span></span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 循环条件&lt;=10</span></span><br><span class="line">    <span class="keyword">while</span>(i&lt;=<span class="number">10</span>)&#123;</span><br><span class="line">        System.out.println(<span class="string">"HelloWorld"</span>);</span><br><span class="line">        <span class="comment">// 步进</span></span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>while循环计算1-100之间的和</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 使用while循环实现</span></span><br><span class="line">    <span class="comment">// 定义一个变量,记录累加求和</span></span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 定义初始化表达式</span></span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 使用while循环让初始化表达式的值变化</span></span><br><span class="line">    <span class="keyword">while</span>(i&lt;=<span class="number">100</span>)&#123;</span><br><span class="line">        <span class="comment">// 累加求和</span></span><br><span class="line">        sum += i;</span><br><span class="line">        <span class="comment">// 步进表达式改变变量的值</span></span><br><span class="line">        i++;</span><br><span class="line">    &#125;     </span><br><span class="line">    <span class="comment">// 打印求和的变量</span></span><br><span class="line">    System.out.println(<span class="string">"1‐100的和是："</span>+sum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-4-循环语句-3-—-do…while"><a href="#4-4-循环语句-3-—-do…while" class="headerlink" title="4 . 4　循环语句 3 — do…while"></a>4 . 4　循环语句 3 — do…while</h3><ul><li><p><b>do…while循环格式：</b></p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">初始化表达式①</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">    循环体③</span><br><span class="line">    步进表达式④</span><br><span class="line">&#125;<span class="keyword">while</span>(布尔表达式②);</span><br></pre></td></tr></table></figure></li><li><p><b>执行流程</b></p><ul><li>执行顺序：①③④&gt;②③④&gt;②③④…②不满足为止。</li><li>①负责完成循环变量初始化。</li><li>②负责判断是否满足循环条件，不满足则跳出循环。 </li><li>③具体执行的语句。</li><li><p>④循环后，循环变量的变化情况。</p><p><img src="https://s2.ax1x.com/2020/02/23/3128h9.png" alt="3128h9.png" style="zoom:80%;" /></p></li></ul></li></ul><p>输出10次HelloWorld</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">do</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"HelloWorld"</span>);</span><br><span class="line">        x++;</span><br><span class="line">    &#125;<span class="keyword">while</span>(x&lt;=<span class="number">10</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>do…while循环的特点：无条件执行一次循环体，即使我们将循环条件直接写成false，也依然会循环一次。这样的循环具有一定的风险性，因此初学不建议使用do…while循环。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    <span class="keyword">do</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"无条件执行一次"</span>);</span><br><span class="line">    &#125;<span class="keyword">while</span>(<span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-5-循环语句的区别"><a href="#4-5-循环语句的区别" class="headerlink" title="4 . 5　循环语句的区别"></a>4 . 5　循环语句的区别</h3><ul><li><kbd>for</kbd> 和 <kbd>while</kbd> 的小区别：<ul><li>控制条件语句所控制的那个变量，在for循环结束后，就不能再被访问到了，而while循环结束还可以继 续使用，如果你想继续使用，就用while，否则推荐使用for。原因是for循环结束，该变量就从内存中消 失，能够提高内存的使用效率。 </li><li>在已知循环次数的时候使用推荐使用for，循环次数未知的时推荐使用while。 </li></ul></li></ul><h3 id="4-6-跳出语句"><a href="#4-6-跳出语句" class="headerlink" title="4 . 6　跳出语句"></a>4 . 6　跳出语句</h3><h4 id="break"><a href="#break" class="headerlink" title="break"></a>break</h4><ul><li><p><b>使用场景：终止switch或者循环 </b></p><ul><li>终止switch或者循环在选择结构switch语句中。</li><li>在循环语句中。</li><li><p>离开使用场景的存在是没有意义的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i&lt;=<span class="number">10</span>; i++)&#123;</span><br><span class="line">        <span class="comment">// 需求:打印完两次HelloWorld之后结束循环</span></span><br><span class="line">        <span class="keyword">if</span>(i == <span class="number">3</span>)&#123;</span><br><span class="line">            <span class="keyword">break</span>;         </span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"HelloWorld"</span>+i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="continue"><a href="#continue" class="headerlink" title="continue"></a>continue</h4><ul><li><b>使用场景：结束本次循环，继续下一次的循环</b></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++)&#123;</span><br><span class="line">        <span class="comment">// 需求:不打印第三次HelloWorld</span></span><br><span class="line">        <span class="keyword">if</span>(i == <span class="number">3</span>)&#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"HelloWorld"</span>+i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-扩展知识点"><a href="#5-扩展知识点" class="headerlink" title="5 .　扩展知识点"></a>5 .　扩展知识点</h2><h3 id="5-1-死循环"><a href="#5-1-死循环" class="headerlink" title="5 . 1　死循环"></a>5 . 1　死循环</h3><ul><li><p><b>死循环：</b>也就是循环中的条件永远为true，死循环的是永不结束的循环。例如：while(true){}。</p><p>  在后期的开发中，会出现使用死循环的场景，例如：我们需要读取用户输入的输入，但是用户输入多少数据我们并不清楚，也只能使用死循环，当用户不想输入数据了，就可以结束循环了，如何去结束一个死循环呢，就需要使用到跳出语句了。</p></li></ul><h3 id="5-2-嵌套循环"><a href="#5-2-嵌套循环" class="headerlink" title="5 . 2　嵌套循环"></a>5 . 2　嵌套循环</h3><ul><li><b>所谓嵌套循环</b>，是指一个循环的循环体是另一个循环。比如for循环里面还有一个for循环，就是嵌套循环。总 共的循环次数=外循环次数*内循环次数 。</li><li><b>嵌套循环格式： </b></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(初始化表达式①; 循环条件②; 步进表达式⑦)&#123;</span><br><span class="line">    <span class="keyword">for</span>(初始化表达式③; 循环条件④; 步进表达式⑥)&#123;</span><br><span class="line">        执行语句⑤;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><b>嵌套循环执行流程：</b><ul><li>执行顺序：①②③④⑤⑥&gt;④⑤⑥&gt;⑦②③④⑤⑥&gt;④⑤⑥</li><li>外循环一次，内循环多次。 </li><li>比如跳绳：一共跳5组，每组跳10个。5组就是外循环，10个就是内循环。</li></ul></li><li>练习：使用嵌套循环，打印5*8的矩形</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 5*8的矩形，打印5行*号，每行8个</span></span><br><span class="line">    <span class="comment">// 外循环5次，内循环8次</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">8</span>; j++)&#123;</span><br><span class="line">            <span class="comment">// 不换行打印星号</span></span><br><span class="line">            System.out.print(<span class="string">"*"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 内循环打印8个星号后，需要一次换行 </span></span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;流程控制语句&quot;&gt;&lt;a href=&quot;#流程控制语句&quot; class=&quot;headerlink&quot; title=&quot;流程控制语句&quot;&gt;&lt;/a&gt;流程控制语句&lt;/h1&gt;&lt;h2 id=&quot;1-流程控制&quot;&gt;&lt;a href=&quot;#1-流程控制&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
    
      <category term="Java基础" scheme="https://error-codes.github.io/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="基础知识" scheme="https://error-codes.github.io/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
      <category term="Java" scheme="https://error-codes.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>数据类型转换、运算符、方法入门</title>
    <link href="https://error-codes.github.io/posts/e64a53c7.html"/>
    <id>https://error-codes.github.io/posts/e64a53c7.html</id>
    <published>2020-02-22T06:44:00.000Z</published>
    <updated>2020-02-23T11:22:05.793Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据类型转换、运算符、方法入门"><a href="#数据类型转换、运算符、方法入门" class="headerlink" title="数据类型转换、运算符、方法入门"></a>数据类型转换、运算符、方法入门</h1><h2 id="1-数据类型转换"><a href="#1-数据类型转换" class="headerlink" title="1 .　数据类型转换"></a>1 .　数据类型转换</h2><p>Java程序中要求参与的计算的数据，必须要保证数据类型的一致性，如果数据类型不一致将发生类型转换。</p><h3 id="1-1-自动转换"><a href="#1-1-自动转换" class="headerlink" title="1 . 1　自动转换"></a>1 . 1　自动转换</h3><p>一个<kbd>int</kbd>类型变量和一个<kbd>byte</kbd>类型变量进行假发运算，结果会是什么数据类型？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">byte</span> b = <span class="number">2</span>;</span><br></pre></td></tr></table></figure><p>运算结果，变量的类型将是<kbd>int</kbd>类型，这就死出现了数据类型的自动类型转换现象。</p><ul><li><b>自动转换：</b>将<kbd>取值范围小的类型</kbd>自动提升为<kbd>取值范围大的类型</kbd>。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">byte</span> b = <span class="number">2</span>;</span><br><span class="line">    <span class="comment">// byte x = b + i;  // 报错</span></span><br><span class="line">    <span class="comment">// int类型和byte类型运算，结果是int类型</span></span><br><span class="line">    <span class="keyword">int</span> j = b + i;</span><br><span class="line">    System.out.println(j);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="转换原理图解"><a href="#转换原理图解" class="headerlink" title="转换原理图解"></a>转换原理图解</h4><p><kbd>byte</kbd>类型内存占用<kbd>一个字节</kbd>，在和<kbd>int </kbd> 类型进行运算时会提升为<kbd>int </kbd> 类型，自动补充<kbd>三个字节 </kbd> ，因此计算后的结果还是<kbd>int </kbd> 类型。</p><p><img src="https://s2.ax1x.com/2020/02/23/3llGOU.png" alt="3llGOU.png" style="zoom:80%;" /></p><p>同理，当一个<kbd>int </kbd> 类型变量和一个<kbd>double </kbd> 变量运算时，<kbd>int </kbd> 类型将会自动提升为<kbd>double </kbd> 类型进行运算。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">double</span> d = <span class="number">2.5</span>;</span><br><span class="line">    <span class="comment">// int类型和double类型运算时，结果是double类型</span></span><br><span class="line">    <span class="comment">// int类型会提升为double类型</span></span><br><span class="line">    <span class="comment">// int e = i + d;// 报错</span></span><br><span class="line">    <span class="keyword">double</span> e = i + d;</span><br><span class="line">    System.out.println(e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="转换规则"><a href="#转换规则" class="headerlink" title="转换规则"></a>转换规则</h4><p>范围小的类型向范围大的类型提升，<kbd>byte、short、char </kbd> 运算时直接提升为<kbd>int </kbd> 。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">byte</span>、<span class="keyword">short</span>、<span class="keyword">char</span> ---&gt; <span class="keyword">int</span> ---&gt; <span class="keyword">long</span> ---&gt; <span class="keyword">float</span> ---&gt; <span class="keyword">double</span></span><br></pre></td></tr></table></figure><h3 id="1-2-强制转换"><a href="#1-2-强制转换" class="headerlink" title="1 . 2　强制转换"></a>1 . 2　强制转换</h3><p>将<kbd>$ 1.5 $ </kbd> 赋值到<kbd>int </kbd> 类型变量会发生什么？产生编译失败，肯定无法赋值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">1.5</span>; <span class="comment">// 错误</span></span><br></pre></td></tr></table></figure><p><kbd>double </kbd> 类型内存<kbd>$ 8 $个字节 </kbd> ，<kbd>int </kbd> 类型内存<kbd>$ 4 $ 个字节 </kbd> 。</p><p><kbd>$ 1.5 $ </kbd> 是<kbd>double </kbd> 类型，取值范围大于<kbd>int </kbd> 。可以理解为<kbd>double </kbd> 是8升的水桶，<kbd>int </kbd> 是4升的水杯，不能把水桶中的水直接倒进水杯中。</p><p>想要赋值成功，只有通过强制类型转换，将<kbd>double </kbd> 类型强制转换为<kbd>int </kbd> 类型才能赋值。</p><ul><li><b>强制类型转换：</b>将<kbd>取值范围大的类型 </kbd> 强制转换为<kbd>取值范围小的类型 </kbd> 。</li></ul><p>比较而言，自动转换是Java自动执行的，而强制转换需要我们手动执行。</p><p>自动转换是Java判断后给出的方案，水杯不能装下水桶中的水，把水杯换成同等大小的水桶，然后再把水桶中的水倒进水杯换成的水桶中。</p><p>强制转换是我们判断后给出的方案，水杯就要装水桶中的水，多出来的水就让它溢出，能装多少水就装多少水。</p><h4 id="转换格式"><a href="#转换格式" class="headerlink" title="转换格式"></a>转换格式</h4><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">数据类型 变量名 = （数据类型）被转数据值<span class="comment">;</span></span><br></pre></td></tr></table></figure><p>将<kbd>$ 1.5 $ </kbd> 赋值到<kbd>int </kbd> 类型，代码修改为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// double类型强制转换为int类型，直接去掉小数点。</span></span><br><span class="line"><span class="keyword">int</span> i = (<span class="keyword">int</span>)<span class="number">1.5</span>;</span><br></pre></td></tr></table></figure><p>同理，当一个<kbd>short </kbd> 类型与<kbd>1 </kbd> 相加，我们知道会类型提升，但是还想给结果赋值为short类型，就需要强制类型转换。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="comment">// short类型变量，内存中2个字节</span></span><br><span class="line"><span class="keyword">short</span> s = <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">出现编译失败</span></span><br><span class="line"><span class="comment">s 和 1 做运算时，1 是 int 类型，s 会被提升为 int 类型</span></span><br><span class="line"><span class="comment">s + 1 后的结果是 int 类型，将结果再赋值给 short 类型时发生错误</span></span><br><span class="line"><span class="comment">short 内存2个字节，int 内存4个字节</span></span><br><span class="line"><span class="comment">必须将 int 强制转换为 short 才能完成赋值</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">s = s + <span class="number">1</span>; <span class="comment">// 编译失败</span></span><br><span class="line">s = (<span class="keyword">short</span>)(s + <span class="number">1</span>); <span class="comment">// 编译成功</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="转换原理图解-1"><a href="#转换原理图解-1" class="headerlink" title="转换原理图解"></a>转换原理图解</h4><p><img src="https://s2.ax1x.com/2020/02/23/3llYmF.png" alt="3llYmF.png" style="zoom:80%;" /></p><h3 id="强烈注意"><a href="#强烈注意" class="headerlink" title="强烈注意"></a>强烈注意</h3><ul><li>浮点转成整形，直接取消小数点，可能会造成数据损失精度。</li><li><kbd>int </kbd> 强制转成<kbd>short </kbd> 砍掉2个字节，可能造成数据丢失。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义s为short范围内最大值</span></span><br><span class="line"><span class="keyword">short</span> s = <span class="number">32767</span>;</span><br><span class="line"><span class="comment">// 运算后，强制转换，砍掉2个字节后会出现不确定的结果</span></span><br><span class="line">s = (<span class="keyword">short</span>)(s + <span class="number">10</span>); <span class="comment">// -32759</span></span><br></pre></td></tr></table></figure><h3 id="ASCII编码表"><a href="#ASCII编码表" class="headerlink" title="ASCII编码表"></a>ASCII编码表</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="comment">// 字符类型变量</span></span><br><span class="line"><span class="keyword">char</span> c = <span class="string">'a'</span>;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="comment">// 字符类型和int类型计算</span></span><br><span class="line">System.out.println(c + i); <span class="comment">// 98</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在计算机的内部都是二进制的0、1 数据，如何让计算机可以识别人类文字的问题呢？就产生出了编码表的概念。</p><ul><li>编码表：将人类的文字和一个十进制的数进行对应起来组成的一张表格。</li></ul><div class="table-container"><table><thead><tr><th>字符</th><th>数值</th></tr></thead><tbody><tr><td>$ 0 $</td><td>$ 48 $</td></tr><tr><td>$ 9 $</td><td>$ 57 $</td></tr><tr><td>A</td><td>$ 65 $</td></tr><tr><td>Z</td><td>$ 90 $</td></tr><tr><td>a</td><td>$ 97 $</td></tr><tr><td>z</td><td>$ 122 $</td></tr></tbody></table></div><ul><li>将所有的的英文字母，数字，符号都和十进制进行了对应，因此产生了世界上第一张编码表ASCII（American Standard Code for Information Interchange 美国标准信息交换码）。</li></ul><blockquote><p>小贴士：</p><p>在char类型和int类型计算的过程中，char类型的字符先查询编码表，得到 $ 97 $，再和 $ 1 $求和，结果为$ 98 $。char类型提升 为了int类型。char类型内存$ 2 $个字节，int类型内存$ 4 $个字节。 </p></blockquote><h2 id="2-运算符"><a href="#2-运算符" class="headerlink" title="2 .　运算符"></a>2 .　运算符</h2><h3 id="2-1-算数运算符"><a href="#2-1-算数运算符" class="headerlink" title="2 . 1　算数运算符"></a>2 . 1　算数运算符</h3><div class="table-container"><table><thead><tr><th>算数运算符包括：</th><th></th></tr></thead><tbody><tr><td><kbd>+</kbd></td><td>加法运算、字符串连接运算</td></tr><tr><td><kbd>-</kbd></td><td>减法运算</td></tr><tr><td><kbd>*</kbd></td><td>乘法运算</td></tr><tr><td><kbd>/</kbd></td><td>除法运算</td></tr><tr><td><kbd>%</kbd></td><td>取模运算，两个数字相除取余数</td></tr><tr><td><kbd>++ </kbd> 、<kbd>—</kbd></td><td>自增、自减运算</td></tr></tbody></table></div><p>Java中，整数使用以上运算符，无论如何计算，也不会得到小数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">1357</span>;</span><br><span class="line">System.out.println(i/<span class="number">1000</span>*<span class="number">1000</span>); <span class="comment">// 1000</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><b><kbd>++ </kbd> 运算，变量自己增加1。反之，<kbd>— </kbd> 运算，变量自己减少1，</b>用法与<kbd>++ </kbd> 一致。</p><ul><li><p><b>独立运算：</b></p><ul><li>变量在独立运算时，<kbd>前++ </kbd> 和<kbd>后++ </kbd> 没有区别。</li><li>变量<kbd>前++ </kbd> ：例如<kbd>++i </kbd> 。</li><li>变量<kbd>后++ </kbd> ：例如<kbd>i++ </kbd> 。</li></ul></li><li><p><b>混合运算：</b></p><ul><li><p>和其他变量放在一起，<kbd>前++ </kbd> 和<kbd>后++ </kbd> 就产生了不同。</p></li><li><p>变量<kbd>前++ </kbd> ：变量a自己加1，将加1后的结果赋值给b，也就是说a先计算。a和b都是2。</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> b = ++a;</span><br><span class="line">System.out.println(a); <span class="comment">// 2</span></span><br><span class="line">System.out.println(b); <span class="comment">// 2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>变量<kbd>后++ </kbd> ：变量a自己的值赋值给变量b，此时变量b的值就是1，变量a自己再加1。a是2，b是1。</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> b = a++;</span><br><span class="line">System.out.println(a); <span class="comment">// 2</span></span><br><span class="line">System.out.println(b); <span class="comment">// 1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p><b><kbd>+ </kbd> 符号在字符串中的操作：</b></p><ul><li><p><kbd>+ </kbd> 符号在遇到字符串的时候，表示连接，拼接的含义。</p></li><li><p>“a” + “b”的结果是”ab”，连接含义。</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"5 + 5 = "</span> + <span class="number">5</span> + <span class="number">5</span>); <span class="comment">// 输出5 + 5 = 55</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="2-2-赋值运算符"><a href="#2-2-赋值运算符" class="headerlink" title="2 . 2　赋值运算符"></a>2 . 2　赋值运算符</h3><div class="table-container"><table><thead><tr><th>赋值运算符包括：</th><th></th></tr></thead><tbody><tr><td><kbd>=</kbd></td><td>等于号</td></tr><tr><td><kbd>+=</kbd></td><td>加等于</td></tr><tr><td><kbd>-=</kbd></td><td>减等于</td></tr><tr><td><kbd>*=</kbd></td><td>乘等于</td></tr><tr><td><kbd>/=</kbd></td><td>除等于</td></tr><tr><td><kbd>%=</kbd></td><td>取模等</td></tr></tbody></table></div><ul><li><p><b>赋值运算符：</b>将符号右边的值，赋给左边的变量。</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">5</span>;</span><br><span class="line">i += <span class="number">5</span>; <span class="comment">//计算方式：i = i + 5  变量i先加5，再赋值给变量i</span></span><br><span class="line">System.out.println(i); <span class="comment">// 10</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-3-比较运算符"><a href="#2-3-比较运算符" class="headerlink" title="2 . 3　比较运算符"></a>2 . 3　比较运算符</h3><div class="table-container"><table><thead><tr><th>比较运算符包括：</th><th></th></tr></thead><tbody><tr><td><kbd>==</kbd></td><td>比较符号两边数据是否相等，相等结果是true。</td></tr><tr><td>&lt;kbd><</kbd></td><td>比较符号左边的数据是否小于右边的数据，如果小于结果是true。</td></tr><tr><td><kbd&gt;></kbd></td><td>比较符号左边的数据是否大于右边的数据，如果大于结果是true。</td></tr><tr><td><kbd>&lt;=</kbd></td><td>比较符号左边的数据是否小于或者等于右边的数据，如果小于结果是true。</td></tr><tr><td><kbd>&gt;=</kbd></td><td>比较符号左边的数据是否大于或者等于右边的数据，如果小于结果是true。</td></tr><tr><td><kbd>!=</kbd></td><td>不等于符号 ，如果符号两边的数据不相等，结果是true。</td></tr></tbody></table></div><ul><li><p><b>比较运算符：</b>是两个数据之间进行比较的运算，运算结果都是布尔值<kbd>true </kbd> 或者<kbd>false </kbd> 。</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">System.out.println(<span class="number">1</span> == <span class="number">1</span>); <span class="comment">// true</span></span><br><span class="line">System.out.println(<span class="number">1</span> &lt; <span class="number">2</span>); <span class="comment">// true</span></span><br><span class="line">System.out.println(<span class="number">3</span> &gt; <span class="number">4</span>); <span class="comment">// false</span></span><br><span class="line">System.out.println(<span class="number">3</span> &lt;= <span class="number">4</span>); <span class="comment">// true</span></span><br><span class="line">System.out.println(<span class="number">3</span> &gt;= <span class="number">4</span>); <span class="comment">// false</span></span><br><span class="line">System.out.println(<span class="number">3</span> != <span class="number">4</span>); <span class="comment">// true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-4-逻辑运算符"><a href="#2-4-逻辑运算符" class="headerlink" title="2 . 4　逻辑运算符"></a>2 . 4　逻辑运算符</h3><div class="table-container"><table><thead><tr><th>逻辑运算符包括：</th><th></th></tr></thead><tbody><tr><td><kbd>&amp;&amp; </kbd> 短路与</td><td>$ 1 $ . 　两边都是true，结果是true<br/>$ 2 $ . 　一边是false，结果是false<br/>短路特点：符号左边是false，右边不再运算</td></tr><tr><td><kbd>&#124;&#124; </kbd> 短路或</td><td>$ 1 $ .　 两边都是false，结果是false<br/>$ 2 $ . 　一边是true，结果是true<br/>短路特点： 符号左边是true，右边不再运算</td></tr><tr><td><kbd>！ </kbd> 取反</td><td>$ 1 $. 　! true 结果是false<br/>$ 2 $ . 　! false结果是true</td></tr></tbody></table></div><ul><li><p><b>逻辑运算符：</b>是用来连接两个布尔类型结果的运算符，运算结果都是布尔值<kbd>true </kbd> 或者<kbd>false </kbd> 。</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">System.out.println(<span class="keyword">true</span> &amp;&amp; <span class="keyword">true</span>); <span class="comment">// true</span></span><br><span class="line">System.out.println(<span class="keyword">true</span> &amp;&amp; <span class="keyword">false</span>); <span class="comment">// false</span></span><br><span class="line">System.out.println(<span class="keyword">false</span> &amp;&amp; <span class="keyword">true</span>); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">System.out.println(<span class="keyword">false</span> || <span class="keyword">false</span>); <span class="comment">// false</span></span><br><span class="line">System.out.println(<span class="keyword">false</span> || <span class="keyword">true</span>); <span class="comment">// true</span></span><br><span class="line">System.out.println(<span class="keyword">true</span> || <span class="keyword">false</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">System.out.println(!<span class="keyword">false</span>); <span class="comment">// true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-5-三元运算符"><a href="#2-5-三元运算符" class="headerlink" title="2 . 5　三元运算符"></a>2 . 5　三元运算符</h3><ul><li><p><b>三元运算符格式：</b></p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">数据类型 变量名 = 布尔类型表达式 ? 结果<span class="number">1</span>: 结果<span class="number">2</span>;</span><br></pre></td></tr></table></figure></li><li><p><b>三元运算符计算方式：</b></p><ul><li>布尔类型表达式结果是true，三元运算符整体结果为1，赋值给变量。</li><li><p>布尔类型表达式结果是false，三元运算符整体结果为2，赋值给变量。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = (<span class="number">1</span> == <span class="number">2</span> ? <span class="number">100</span> : <span class="number">200</span>);</span><br><span class="line">System.out.println(i); <span class="comment">// 200</span></span><br><span class="line"><span class="keyword">int</span> j = (<span class="number">3</span> &lt;= <span class="number">4</span> ? <span class="number">500</span> : <span class="number">600</span>);</span><br><span class="line">System.out.println(j); <span class="comment">// 500</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="3-方法入门"><a href="#3-方法入门" class="headerlink" title="3 .　方法入门"></a>3 .　方法入门</h2><h3 id="3-1-概述"><a href="#3-1-概述" class="headerlink" title="3 . 1　概述"></a>3 . 1　概述</h3><p>在学习运算符的时候，都为每个运算符单独的创建一个新的类和main方法，我们会发现这样编写代码非常繁琐，而且重复代码过多，要想避免这些重复的代码，就需要使用方法来实现。</p><ul><li><b>方法：</b>将一个功能抽取出来，把代码单独定义在一个大括号内，形成一个单独的功能。</li></ul><p>当我们需要这个功能时，就可以去调用，这样即实现了代码的复用性，也解决了代码冗余的现象。</p><h3 id="3-2-方法的定义"><a href="#3-2-方法的定义" class="headerlink" title="3 . 2　方法的定义"></a>3 . 2　方法的定义</h3><ul><li><p><b>定义格式：</b></p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">修饰符 返回值类型 方法名 (参数列表)&#123;</span><br><span class="line">代码...</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><b>定义格式解释：</b></p><ul><li><b>修饰符：</b><ul><li>可访问控制符：<br/>公共访问控制符<kbd>public</kbd>；<br/>私有访问控制符<kbd>private</kbd>；<br/>保护访问控制符<kbd>protected</kbd>；<br/>私有保护访问控制符<kbd>private protected </kbd> 。</li><li>非访问控制符：<br/>抽象方法控制符<kbd>abstract</kbd>；<br/>静态方法控制符<kbd>static</kbd>；<br/>最终方法控制符<kbd>final</kbd>；<br/>本地方法控制符<kbd>native</kbd>；<br/>同步方法控制符<kbd>synchronized </kbd> 。</li></ul></li><li><b>返回值类型：</b><br/>空返回值类型<kbd>void</kbd>；<br>非空返回值类型<kbd>int、float、long、String、ArrayList&lt;&gt;、Object </kbd> 等。</li><li><b>方法名：</b>为定义的方法起名，满足标识符规范，用来调用方法，推荐采用驼峰式命名。eg：methodA。</li><li><b>参数列表：</b><ul><li>无参数：留空，不需要。</li><li>有参数：运行方法时需要外界的数据，使得方法运行下去，需要的数据就是方法的参数列表。</li></ul></li><li><b>return：</b><ul><li>无返回值：return;方法结束。</li><li>有返回值：将返回值返回，return 20;。</li></ul></li></ul></li><li><p>举例：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">methodA</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"这是一个方法A"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-3-方法的调用"><a href="#3-3-方法的调用" class="headerlink" title="3 . 3　方法的调用"></a>3 . 3　方法的调用</h3><p>方法在定义完毕后，方法不会自己运行，必须要被调用才能执行，我们可以在方法main中来调用我们自己定义好的方法。在主方法中，直接写要调用的方法名就可以调用了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="comment">// 调用定义的方法method</span></span><br><span class="line">method();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 定义方法，被main方法调用</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"定义的method方法，需要被main方法调用"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-4-调用练习"><a href="#3-4-调用练习" class="headerlink" title="3 . 4　调用练习"></a>3 . 4　调用练习</h3><p>将三元运算符代码抽取到自定义的方法中，并调用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">int</span> j = <span class="number">5</span>;</span><br><span class="line"><span class="comment">// 调用定义的方法operator</span></span><br><span class="line">System.out.println(operator(i,j)); <span class="comment">// 200</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 定义方法operator，方法中定义三元运算符</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">operator</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> k = (i == j ? <span class="number">100</span> : <span class="number">200</span>);</span><br><span class="line"><span class="keyword">return</span> k;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-5-注意事项"><a href="#3-5-注意事项" class="headerlink" title="3 . 5　注意事项"></a>3 . 5　注意事项</h3><ul><li><p><b>方法定义注意事项：</b></p><ul><li>方法必须定义在一类中方法外</li><li><p>方法不能定义在另一个方法里面</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 正确写法✔，类中，main方法外可以定义方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="comment">// 错误方法❌，一个方法不能定义在另一个方法内部</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="4-扩展知识点"><a href="#4-扩展知识点" class="headerlink" title="4 .　扩展知识点"></a>4 .　扩展知识点</h2><h3 id="4-1-符号的扩展"><a href="#4-1-符号的扩展" class="headerlink" title="4 . 1　+=符号的扩展"></a>4 . 1　+=符号的扩展</h3><p>下面的程序有问题吗？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="keyword">short</span> s = <span class="number">1</span>;</span><br><span class="line">s += <span class="number">1</span>;</span><br><span class="line">System.out.println(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分析：<kbd>s += 1 </kbd> 逻辑上看作是<kbd>s = s + 1 </kbd> ，计算结果被提升为int类型，再向short类型赋值时发生错误，因为不能将取值范围大的类型赋值到取值范围小的类型。但是，<kbd>s = s + 1  进行两次运算 </kbd> ，<kbd>+= </kbd> 是一个运算符，只运算一次，并带有强制转换的特点，也就是说<kbd>s += 1 </kbd> 就是<kbd>s = (short)(s + 1) </kbd> ，因此没有问题，编译通过，运行结果为2。</p><h3 id="4-2-常量和变量的运算"><a href="#4-2-常量和变量的运算" class="headerlink" title="4 . 2　常量和变量的运算"></a>4 . 2　常量和变量的运算</h3><p>下面的程序有问题吗？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="keyword">byte</span> b1 = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">byte</span> b2 = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">byte</span> b3 = <span class="number">1</span> + <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">byte</span> b4 = b1 + b2;</span><br><span class="line">    System.out.println(b3);</span><br><span class="line">    System.out.println(b4);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分析： <kbd>b3 = 1 + 2  </kbd> ， <kbd>1 和 2</kbd>是常量，为固定不变的数据，在编译的时候（编译器javac），已经确定了 <kbd>1 + 2</kbd>的结果并没 有超过byte类型的取值范围，可以赋值给变量 <kbd>b3</kbd>，因此 <kbd>b3=1 + 2</kbd>是正确的。<br>反之， <kbd>b4 = b2 + b3</kbd>， <kbd>b2 和 b3</kbd>是变量，变量的值是可能变化的，在编译的时候，编译器javac不确定<kbd>b2 + b3 </kbd> 的结果是什 么，因此会将结果以int类型进行处理，所以int类型不能赋值给byte类型，因此编译失败。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;数据类型转换、运算符、方法入门&quot;&gt;&lt;a href=&quot;#数据类型转换、运算符、方法入门&quot; class=&quot;headerlink&quot; title=&quot;数据类型转换、运算符、方法入门&quot;&gt;&lt;/a&gt;数据类型转换、运算符、方法入门&lt;/h1&gt;&lt;h2 id=&quot;1-数据类型转换&quot;&gt;&lt;a 
      
    
    </summary>
    
    
      <category term="Java基础" scheme="https://error-codes.github.io/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="基础知识" scheme="https://error-codes.github.io/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
      <category term="Java" scheme="https://error-codes.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>变量和数据类型</title>
    <link href="https://error-codes.github.io/posts/33466eb7.html"/>
    <id>https://error-codes.github.io/posts/33466eb7.html</id>
    <published>2020-02-22T03:02:00.000Z</published>
    <updated>2020-02-24T12:06:43.234Z</updated>
    
    <content type="html"><![CDATA[<h1 id="变量和数据类型"><a href="#变量和数据类型" class="headerlink" title="变量和数据类型"></a>变量和数据类型</h1><hr><h2 id="变量概述"><a href="#变量概述" class="headerlink" title="变量概述"></a>变量概述</h2><hr><ul><li>变量：常量是固定不变的数据，那么在程序中可以变化的量称为变量。</li></ul><blockquote><p>数学中，可以使用字母代替数字运算,例如 x=1+5 或者 6=x+5。<br>程序中，可以使用字母保存数字的方式进行运算，提高计算能力，可以解决更多的问题。比如x保存5，x也可 以保存6，这样x保存的数据是可以改变的，也就是我们所讲解的变量。 </p></blockquote><p>Java中要求一个变量每次只能保存一个数据，必须要明确保存的数据类型。 </p><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><hr><h3 id="数据类型分类"><a href="#数据类型分类" class="headerlink" title="数据类型分类"></a>数据类型分类</h3><p>Java的数据类型分为两大类：</p><ul><li>基本数据类型：包括<kbd>整数</kbd>、<kbd>浮点数</kbd>、<kbd>字符</kbd>、<kbd>布尔</kbd>。</li><li>引用数据类型：包括<kbd>类</kbd>、<kbd>数组</kbd>、<kbd>字符串</kbd>、<kbd>接口</kbd>。</li></ul><h3 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h3><p>四类八种基本数据类型：</p><div class="table-container"><table><thead><tr><th>数据类型</th><th>关键字</th><th>内存占用</th><th>取值范围</th></tr></thead><tbody><tr><td>字节型</td><td>byte</td><td>1个字节</td><td>$ -128 $ ~ $127 $</td></tr><tr><td>短整型</td><td>short</td><td>2个字节</td><td>$ -32768 $ ~ $ 32767 $</td></tr><tr><td>整形</td><td>int(默认)</td><td>4个字节</td><td>-$ 2^{31} $ ~ $ 2^{31}-1 $</td></tr><tr><td>长整型</td><td>long</td><td>8个字节</td><td>-$ 2^{63} $ ~ $ 2^{63}-1 $</td></tr><tr><td>单精度浮点数</td><td>float</td><td>4个字节</td><td>$ 1.4013E-45 $ ~ $ 3.4028E+38 $</td></tr><tr><td>双精度浮点数</td><td>double(默认)</td><td>8个字节</td><td>$ 4.9E-324 $ ~ $1.7977E+308$</td></tr><tr><td>字符型</td><td>char</td><td>2个字节</td><td>$ 0 $ - $ 65535 $</td></tr><tr><td>布尔类型</td><td>boolean</td><td>1个字节</td><td>$ true $ ，$ false $</td></tr><tr><td></td><td></td><td></td></tr></tbody></table></div><blockquote><p> Java中的默认类型：整数类型是 <kbd>int</kbd>、浮点类型是 <kbd>double</kbd> 。</p></blockquote><h2 id="变量的定义"><a href="#变量的定义" class="headerlink" title="变量的定义"></a>变量的定义</h2><hr><p>变量定义的格式包括三个要素：<kbd>数据类型</kbd>、<kbd>变量名</kbd>、<kbd>数据值</kbd>。</p><h3 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h3><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">数据类型 变量名 = 数据值<span class="comment">;</span></span><br></pre></td></tr></table></figure><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><p>定义所有基本数据类型的变量，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Variable</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 定义字节型变量 b</span></span><br><span class="line">        <span class="keyword">byte</span> b = <span class="number">100</span>;</span><br><span class="line">        System.out.println(b);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 定义短整型变量 s</span></span><br><span class="line">        <span class="keyword">short</span> s = <span class="number">1000</span>;</span><br><span class="line">        System.out.println(s);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 定义整形变量 i</span></span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">123456</span>;</span><br><span class="line">        System.out.println(i);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 定义长整型变量 l</span></span><br><span class="line">        <span class="keyword">long</span> l = <span class="number">1234567890L</span>;</span><br><span class="line">        System.out.println(l);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 定义单精度浮点型变量 f</span></span><br><span class="line">        <span class="keyword">float</span> f = <span class="number">9.8f</span>F;</span><br><span class="line">        System.out.println(f);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 定义双精度浮点型变量 d</span></span><br><span class="line">        <span class="keyword">double</span> d = <span class="number">2.8</span>;</span><br><span class="line">        System.out.println(d);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 定义字符型变量 c</span></span><br><span class="line">        <span class="keyword">char</span> c = <span class="string">'L'</span>;</span><br><span class="line">        System.out.println(c);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 定义布尔型变量 b</span></span><br><span class="line">        <span class="keyword">boolean</span> b = <span class="keyword">true</span>;</span><br><span class="line">        System.out.println(b);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>long 类型：建议数据后加L表示。</p><p>float 类型：建议数据后加F表示。</p></blockquote><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><hr><ul><li>变量名称：在同一个大括号范围内，变量的名字不能相同。</li><li>变量赋值：定义的变量，不赋值不能使用。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;变量和数据类型&quot;&gt;&lt;a href=&quot;#变量和数据类型&quot; class=&quot;headerlink&quot; title=&quot;变量和数据类型&quot;&gt;&lt;/a&gt;变量和数据类型&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&quot;变量概述&quot;&gt;&lt;a href=&quot;#变量概述&quot; class=&quot;headerlink&quot;
      
    
    </summary>
    
    
      <category term="Java基础" scheme="https://error-codes.github.io/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="基础知识" scheme="https://error-codes.github.io/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
      <category term="Java" scheme="https://error-codes.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>数据结构与算法分析(Java语言描述)</title>
    <link href="https://error-codes.github.io/posts/d6f4a62d.html"/>
    <id>https://error-codes.github.io/posts/d6f4a62d.html</id>
    <published>2020-02-20T05:19:20.000Z</published>
    <updated>2020-02-24T12:20:15.076Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数学知识复习"><a href="#数学知识复习" class="headerlink" title="数学知识复习"></a>数学知识复习</h1><p>本节列出一些需要记忆或是能够推导出的基本公式，并从推导过程复习基本的证明方法。</p><h3 id="指数"><a href="#指数" class="headerlink" title="指数"></a>指数</h3><script type="math/tex; mode=display">X^A X^B = X^{A+B}\\\frac {X^A} {X^B} = X^{A-B}\\(X^A)^B = X^{AB}\\X^N + X^N = 2X^N \neq X^{2N}\\2^N + 2^N = 2^{N+1}</script><h3 id="对数"><a href="#对数" class="headerlink" title="对数"></a>对数</h3><p>在计算机科学中，除非有特别的声明，否则所有的对数都是以2为底的。</p><h5 id="定义1-1-X-A-B-当且仅当-log-x-B-A-。"><a href="#定义1-1-X-A-B-当且仅当-log-x-B-A-。" class="headerlink" title="　　定义1 .  1     　　$X^A = B$  当且仅当   ${log_x}^B = A$ 。"></a>　　定义1 .  1     　　$X^A = B$  当且仅当   ${log_x}^B = A$ 。</h5><p>　　　由该定义可以得到几个方便的等式。</p><h5 id="定理1-1"><a href="#定理1-1" class="headerlink" title="　　定理1 .  1"></a>　　定理1 .  1</h5><script type="math/tex; mode=display">{log_A}^B = \frac { {log_C}^B}{ {log_C}^A};　A,　B,　C>0,　A\neq1</script><h5 id="证明："><a href="#证明：" class="headerlink" title="　　证明："></a>　　证明：</h5><p>　　　令 $X = {log_C}^B,　Y = {log_C}^A,　以及　Z = {log_A}^B$。此时由对数的定义，$C^X = B,　C^Y = A$ 以及$ A^Z = B,$　联合这三个等式则产生　$(C^Y)^Z = C^X = B$。因此，$X = YZ,$　定理得证。</p><h5 id="定理1-2"><a href="#定理1-2" class="headerlink" title="　　定理1 .  2"></a>　　定理1 .  2</h5><script type="math/tex; mode=display">logAB = logA + logB;　A,　B > 0</script><h5 id="证明：-1"><a href="#证明：-1" class="headerlink" title="　　证明："></a>　　证明：</h5><p>　　　令 $X = logB,　Y = logA,　以及　Z = logAB$。此时由于假设默认的底为2，$2^X = A,　2^Y = B$ 以及$2^Z = B,$　联合最后的三个等式则有　$2^X2^Y = 2^Z = AB$。因此　$X + Y = Z,$　定理得证。    </p><p>　　　其他一些有用的公式如下，他们都能够用类似的方法推导。</p><script type="math/tex; mode=display">log\frac {A}{B} = logA - logB\\log(A^B) = BlogA\\logX < X　对所有的　X > 0 　成立\\log1 = 0,　log2 = 1, 　log1024 = 10,　log1048576 = 20</script><p>　</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;数学知识复习&quot;&gt;&lt;a href=&quot;#数学知识复习&quot; class=&quot;headerlink&quot; title=&quot;数学知识复习&quot;&gt;&lt;/a&gt;数学知识复习&lt;/h1&gt;&lt;p&gt;本节列出一些需要记忆或是能够推导出的基本公式，并从推导过程复习基本的证明方法。&lt;/p&gt;
&lt;h3 id=&quot;指数
      
    
    </summary>
    
    
      <category term="数据结构与算法分析" scheme="https://error-codes.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90/"/>
    
    
      <category term="Java" scheme="https://error-codes.github.io/tags/Java/"/>
    
      <category term="数学" scheme="https://error-codes.github.io/tags/%E6%95%B0%E5%AD%A6/"/>
    
      <category term="基础" scheme="https://error-codes.github.io/tags/%E5%9F%BA%E7%A1%80/"/>
    
      <category term="算法" scheme="https://error-codes.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
</feed>
